/*
 * generated by Xtext
 */
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RdslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGraphsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGraphsGraphParserRuleCall_0_0 = (RuleCall)cGraphsAssignment_0.eContents().get(0);
		private final Assignment cInstancesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInstancesInstanceParserRuleCall_1_0 = (RuleCall)cInstancesAssignment_1.eContents().get(0);
		
		//Model:
		//	graphs=Graph | instances+=Instance*;
		@Override public ParserRule getRule() { return rule; }

		//graphs=Graph | instances+=Instance*
		public Alternatives getAlternatives() { return cAlternatives; }

		//graphs=Graph
		public Assignment getGraphsAssignment_0() { return cGraphsAssignment_0; }

		//Graph
		public RuleCall getGraphsGraphParserRuleCall_0_0() { return cGraphsGraphParserRuleCall_0_0; }

		//instances+=Instance*
		public Assignment getInstancesAssignment_1() { return cInstancesAssignment_1; }

		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_1_0() { return cInstancesInstanceParserRuleCall_1_0; }
	}

	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComponentsComponentParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		private final Assignment cFacetGraphsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetGraphsFacetParserRuleCall_2_0 = (RuleCall)cFacetGraphsAssignment_2.eContents().get(0);
		
		//Graph:
		//	imports+=Import* components+=Component+ facetGraphs+=Facet*;
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* components+=Component+ facetGraphs+=Facet*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//components+=Component+
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }

		//Component
		public RuleCall getComponentsComponentParserRuleCall_1_0() { return cComponentsComponentParserRuleCall_1_0; }

		//facetGraphs+=Facet*
		public Assignment getFacetGraphsAssignment_2() { return cFacetGraphsAssignment_2; }

		//Facet
		public RuleCall getFacetGraphsFacetParserRuleCall_2_0() { return cFacetGraphsFacetParserRuleCall_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGraphKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Import:
		//	"import" name=ID ".graph" ";";
		@Override public ParserRule getRule() { return rule; }

		//"import" name=ID ".graph" ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//".graph"
		public Keyword getGraphKeyword_2() { return cGraphKeyword_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class CompFacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompFacet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFacetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CompFacet:
		//	Facet | Component;
		@Override public ParserRule getRule() { return rule; }

		//Facet | Component
		public Alternatives getAlternatives() { return cAlternatives; }

		//Facet
		public RuleCall getFacetParserRuleCall_0() { return cFacetParserRuleCall_0; }

		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstallersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstallersInstallerParserRuleCall_2_0 = (RuleCall)cInstallersAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Component:
		//	name=ID "{" installers=Installer properties+=Property* "}";
		@Override public ParserRule getRule() { return rule; }

		//name=ID "{" installers=Installer properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//installers=Installer
		public Assignment getInstallersAssignment_2() { return cInstallersAssignment_2; }

		//Installer
		public RuleCall getInstallersInstallerParserRuleCall_2_0() { return cInstallersInstallerParserRuleCall_2_0; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InstallerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Installer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstallerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Installer:
		//	"installer:" name=ID ";";
		@Override public ParserRule getRule() { return rule; }

		//"installer:" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"installer:"
		public Keyword getInstallerKeyword_0() { return cInstallerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChildrenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImportsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFacetsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExtendsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Property:
		//	Children | Export | Imports | Facets | Extends;
		@Override public ParserRule getRule() { return rule; }

		//Children | Export | Imports | Facets | Extends
		public Alternatives getAlternatives() { return cAlternatives; }

		//Children
		public RuleCall getChildrenParserRuleCall_0() { return cChildrenParserRuleCall_0; }

		//Export
		public RuleCall getExportParserRuleCall_1() { return cExportParserRuleCall_1; }

		//Imports
		public RuleCall getImportsParserRuleCall_2() { return cImportsParserRuleCall_2; }

		//Facets
		public RuleCall getFacetsParserRuleCall_3() { return cFacetsParserRuleCall_3; }

		//Extends
		public RuleCall getExtendsParserRuleCall_4() { return cExtendsParserRuleCall_4; }
	}

	public class ExtendsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Extends");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSupComponentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSupComponentComponentCrossReference_1_0 = (CrossReference)cSupComponentAssignment_1.eContents().get(0);
		private final RuleCall cSupComponentComponentIDTerminalRuleCall_1_0_1 = (RuleCall)cSupComponentComponentCrossReference_1_0.eContents().get(1);
		
		//Extends:
		//	"extends:" supComponent=[Component];
		@Override public ParserRule getRule() { return rule; }

		//"extends:" supComponent=[Component]
		public Group getGroup() { return cGroup; }

		//"extends:"
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//supComponent=[Component]
		public Assignment getSupComponentAssignment_1() { return cSupComponentAssignment_1; }

		//[Component]
		public CrossReference getSupComponentComponentCrossReference_1_0() { return cSupComponentComponentCrossReference_1_0; }

		//ID
		public RuleCall getSupComponentComponentIDTerminalRuleCall_1_0_1() { return cSupComponentComponentIDTerminalRuleCall_1_0_1; }
	}

	public class ChildrenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Children");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChildrenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cChildrenAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cChildrenComponentCrossReference_1_0_0 = (CrossReference)cChildrenAssignment_1_0.eContents().get(0);
		private final RuleCall cChildrenComponentIDTerminalRuleCall_1_0_0_1 = (RuleCall)cChildrenComponentCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cChildAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cChildComponentCrossReference_2_0 = (CrossReference)cChildAssignment_2.eContents().get(0);
		private final RuleCall cChildComponentIDTerminalRuleCall_2_0_1 = (RuleCall)cChildComponentCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Children:
		//	"children:" (children+=[Component] ",")* child=[Component] ";";
		@Override public ParserRule getRule() { return rule; }

		//"children:" (children+=[Component] ",")* child=[Component] ";"
		public Group getGroup() { return cGroup; }

		//"children:"
		public Keyword getChildrenKeyword_0() { return cChildrenKeyword_0; }

		//(children+=[Component] ",")*
		public Group getGroup_1() { return cGroup_1; }

		//children+=[Component]
		public Assignment getChildrenAssignment_1_0() { return cChildrenAssignment_1_0; }

		//[Component]
		public CrossReference getChildrenComponentCrossReference_1_0_0() { return cChildrenComponentCrossReference_1_0_0; }

		//ID
		public RuleCall getChildrenComponentIDTerminalRuleCall_1_0_0_1() { return cChildrenComponentIDTerminalRuleCall_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//child=[Component]
		public Assignment getChildAssignment_2() { return cChildAssignment_2; }

		//[Component]
		public CrossReference getChildComponentCrossReference_2_0() { return cChildComponentCrossReference_2_0; }

		//ID
		public RuleCall getChildComponentIDTerminalRuleCall_2_0_1() { return cChildComponentIDTerminalRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExportsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExportsExportVariableParserRuleCall_1_0_0 = (RuleCall)cExportsAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExportAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExportExportVariableParserRuleCall_2_0 = (RuleCall)cExportAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Export:
		//	"exports:" (exports+=exportVariable ",")* export=exportVariable ";";
		@Override public ParserRule getRule() { return rule; }

		//"exports:" (exports+=exportVariable ",")* export=exportVariable ";"
		public Group getGroup() { return cGroup; }

		//"exports:"
		public Keyword getExportsKeyword_0() { return cExportsKeyword_0; }

		//(exports+=exportVariable ",")*
		public Group getGroup_1() { return cGroup_1; }

		//exports+=exportVariable
		public Assignment getExportsAssignment_1_0() { return cExportsAssignment_1_0; }

		//exportVariable
		public RuleCall getExportsExportVariableParserRuleCall_1_0_0() { return cExportsExportVariableParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//export=exportVariable
		public Assignment getExportAssignment_2() { return cExportAssignment_2; }

		//exportVariable
		public RuleCall getExportExportVariableParserRuleCall_2_0() { return cExportExportVariableParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ExportVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "exportVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitialInitialisationParserRuleCall_1_0 = (RuleCall)cInitialAssignment_1.eContents().get(0);
		
		//exportVariable:
		//	name=ID initial=Initialisation?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID initial=Initialisation?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//initial=Initialisation?
		public Assignment getInitialAssignment_1() { return cInitialAssignment_1; }

		//Initialisation
		public RuleCall getInitialInitialisationParserRuleCall_1_0() { return cInitialInitialisationParserRuleCall_1_0; }
	}

	public class InitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Initialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//Initialisation:
		//	"=" val=INT;
		@Override public ParserRule getRule() { return rule; }

		//"=" val=INT
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }
	}

	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cImportsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cImportsImportVariableParserRuleCall_1_0_0 = (RuleCall)cImportsAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cImportedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedImportVariableParserRuleCall_2_0 = (RuleCall)cImportedAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Imports:
		//	"imports:" (imports+=importVariable ",")* imported=importVariable ";";
		@Override public ParserRule getRule() { return rule; }

		//"imports:" (imports+=importVariable ",")* imported=importVariable ";"
		public Group getGroup() { return cGroup; }

		//"imports:"
		public Keyword getImportsKeyword_0() { return cImportsKeyword_0; }

		//(imports+=importVariable ",")*
		public Group getGroup_1() { return cGroup_1; }

		//imports+=importVariable
		public Assignment getImportsAssignment_1_0() { return cImportsAssignment_1_0; }

		//importVariable
		public RuleCall getImportsImportVariableParserRuleCall_1_0_0() { return cImportsImportVariableParserRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//imported=importVariable
		public Assignment getImportedAssignment_2() { return cImportedAssignment_2; }

		//importVariable
		public RuleCall getImportedImportVariableParserRuleCall_2_0() { return cImportedImportVariableParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ImportVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "importVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cImportvariableAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cImportvariableCompFacetCrossReference_1_0_0_0 = (CrossReference)cImportvariableAssignment_1_0_0.eContents().get(0);
		private final RuleCall cImportvariableCompFacetIDTerminalRuleCall_1_0_0_0_1 = (RuleCall)cImportvariableCompFacetCrossReference_1_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final Assignment cNameAssignment_1_0_2_0 = (Assignment)cAlternatives_1_0_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_2_0_0 = (RuleCall)cNameAssignment_1_0_2_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_2_1 = (Keyword)cAlternatives_1_0_2.eContents().get(1);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOptionalKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		
		//importVariable:
		//	"external"? (importvariable=[CompFacet] "." (name=ID | "*") | name=ID) optional?="(optional)"?;
		@Override public ParserRule getRule() { return rule; }

		//"external"? (importvariable=[CompFacet] "." (name=ID | "*") | name=ID) optional?="(optional)"?
		public Group getGroup() { return cGroup; }

		//"external"?
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//importvariable=[CompFacet] "." (name=ID | "*") | name=ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//importvariable=[CompFacet] "." (name=ID | "*")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//importvariable=[CompFacet]
		public Assignment getImportvariableAssignment_1_0_0() { return cImportvariableAssignment_1_0_0; }

		//[CompFacet]
		public CrossReference getImportvariableCompFacetCrossReference_1_0_0_0() { return cImportvariableCompFacetCrossReference_1_0_0_0; }

		//ID
		public RuleCall getImportvariableCompFacetIDTerminalRuleCall_1_0_0_0_1() { return cImportvariableCompFacetIDTerminalRuleCall_1_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//name=ID | "*"
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }

		//name=ID
		public Assignment getNameAssignment_1_0_2_0() { return cNameAssignment_1_0_2_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_2_0_0() { return cNameIDTerminalRuleCall_1_0_2_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_2_1() { return cAsteriskKeyword_1_0_2_1; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//optional?="(optional)"?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }

		//"(optional)"
		public Keyword getOptionalOptionalKeyword_2_0() { return cOptionalOptionalKeyword_2_0; }
	}

	public class FacetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Facets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFacetsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFacetsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cFacetsFacetCrossReference_1_0_0 = (CrossReference)cFacetsAssignment_1_0.eContents().get(0);
		private final RuleCall cFacetsFacetIDTerminalRuleCall_1_0_0_1 = (RuleCall)cFacetsFacetCrossReference_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFacetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFacetFacetCrossReference_2_0 = (CrossReference)cFacetAssignment_2.eContents().get(0);
		private final RuleCall cFacetFacetIDTerminalRuleCall_2_0_1 = (RuleCall)cFacetFacetCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Facets:
		//	"facets:" (facets+=[Facet] ",")* facet=[Facet] ";";
		@Override public ParserRule getRule() { return rule; }

		//"facets:" (facets+=[Facet] ",")* facet=[Facet] ";"
		public Group getGroup() { return cGroup; }

		//"facets:"
		public Keyword getFacetsKeyword_0() { return cFacetsKeyword_0; }

		//(facets+=[Facet] ",")*
		public Group getGroup_1() { return cGroup_1; }

		//facets+=[Facet]
		public Assignment getFacetsAssignment_1_0() { return cFacetsAssignment_1_0; }

		//[Facet]
		public CrossReference getFacetsFacetCrossReference_1_0_0() { return cFacetsFacetCrossReference_1_0_0; }

		//ID
		public RuleCall getFacetsFacetIDTerminalRuleCall_1_0_0_1() { return cFacetsFacetIDTerminalRuleCall_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//facet=[Facet]
		public Assignment getFacetAssignment_2() { return cFacetAssignment_2; }

		//[Facet]
		public CrossReference getFacetFacetCrossReference_2_0() { return cFacetFacetCrossReference_2_0; }

		//ID
		public RuleCall getFacetFacetIDTerminalRuleCall_2_0_1() { return cFacetFacetIDTerminalRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Facet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFacetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExportFacetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExportFacetExportParserRuleCall_3_0 = (RuleCall)cExportFacetAssignment_3.eContents().get(0);
		private final Assignment cChildrenFacetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChildrenFacetChildrenParserRuleCall_4_0 = (RuleCall)cChildrenFacetAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cSupFacetsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final CrossReference cSupFacetsFacetCrossReference_5_1_0_0 = (CrossReference)cSupFacetsAssignment_5_1_0.eContents().get(0);
		private final RuleCall cSupFacetsFacetIDTerminalRuleCall_5_1_0_0_1 = (RuleCall)cSupFacetsFacetCrossReference_5_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cSupFacetAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cSupFacetFacetCrossReference_5_2_0 = (CrossReference)cSupFacetAssignment_5_2.eContents().get(0);
		private final RuleCall cSupFacetFacetIDTerminalRuleCall_5_2_0_1 = (RuleCall)cSupFacetFacetCrossReference_5_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Facet:
		//	"facet" name=ID "{" exportFacet+=Export* childrenFacet=Children? ("extends:" (supFacets+=[Facet] ",")*
		//	supFacet=[Facet])? "}";
		@Override public ParserRule getRule() { return rule; }

		//"facet" name=ID "{" exportFacet+=Export* childrenFacet=Children? ("extends:" (supFacets+=[Facet] ",")*
		//supFacet=[Facet])? "}"
		public Group getGroup() { return cGroup; }

		//"facet"
		public Keyword getFacetKeyword_0() { return cFacetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//exportFacet+=Export*
		public Assignment getExportFacetAssignment_3() { return cExportFacetAssignment_3; }

		//Export
		public RuleCall getExportFacetExportParserRuleCall_3_0() { return cExportFacetExportParserRuleCall_3_0; }

		//childrenFacet=Children?
		public Assignment getChildrenFacetAssignment_4() { return cChildrenFacetAssignment_4; }

		//Children
		public RuleCall getChildrenFacetChildrenParserRuleCall_4_0() { return cChildrenFacetChildrenParserRuleCall_4_0; }

		//("extends:" (supFacets+=[Facet] ",")* supFacet=[Facet])?
		public Group getGroup_5() { return cGroup_5; }

		//"extends:"
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }

		//(supFacets+=[Facet] ",")*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//supFacets+=[Facet]
		public Assignment getSupFacetsAssignment_5_1_0() { return cSupFacetsAssignment_5_1_0; }

		//[Facet]
		public CrossReference getSupFacetsFacetCrossReference_5_1_0_0() { return cSupFacetsFacetCrossReference_5_1_0_0; }

		//ID
		public RuleCall getSupFacetsFacetIDTerminalRuleCall_5_1_0_0_1() { return cSupFacetsFacetIDTerminalRuleCall_5_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_5_1_1() { return cCommaKeyword_5_1_1; }

		//supFacet=[Facet]
		public Assignment getSupFacetAssignment_5_2() { return cSupFacetAssignment_5_2; }

		//[Facet]
		public CrossReference getSupFacetFacetCrossReference_5_2_0() { return cSupFacetFacetCrossReference_5_2_0; }

		//ID
		public RuleCall getSupFacetFacetIDTerminalRuleCall_5_2_0_1() { return cSupFacetFacetIDTerminalRuleCall_5_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cComponentComponentCrossReference_2_0 = (CrossReference)cComponentAssignment_2.eContents().get(0);
		private final RuleCall cComponentComponentIDTerminalRuleCall_2_0_1 = (RuleCall)cComponentComponentCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final RuleCall cIDTerminalRuleCall_6_0 = (RuleCall)cAlternatives_6.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_6_1 = (RuleCall)cAlternatives_6.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCountKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cValAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_8_1_0 = (RuleCall)cValAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cAttributesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAttributesAttributParserRuleCall_9_0 = (RuleCall)cAttributesAssignment_9.eContents().get(0);
		private final Assignment cInstancesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cInstancesInstanceParserRuleCall_10_0 = (RuleCall)cInstancesAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Instance:
		//	"instance" "of" component=[Component] "{" "name:" name=ID (ID | INT)* ";" ("count:" val=INT ";")?
		//	attributes+=Attribut* instances+=Instance* "}";
		@Override public ParserRule getRule() { return rule; }

		//"instance" "of" component=[Component] "{" "name:" name=ID (ID | INT)* ";" ("count:" val=INT ";")? attributes+=Attribut*
		//instances+=Instance* "}"
		public Group getGroup() { return cGroup; }

		//"instance"
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//component=[Component]
		public Assignment getComponentAssignment_2() { return cComponentAssignment_2; }

		//[Component]
		public CrossReference getComponentComponentCrossReference_2_0() { return cComponentComponentCrossReference_2_0; }

		//ID
		public RuleCall getComponentComponentIDTerminalRuleCall_2_0_1() { return cComponentComponentIDTerminalRuleCall_2_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"name:"
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//(ID | INT)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//ID
		public RuleCall getIDTerminalRuleCall_6_0() { return cIDTerminalRuleCall_6_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_6_1() { return cINTTerminalRuleCall_6_1; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }

		//("count:" val=INT ";")?
		public Group getGroup_8() { return cGroup_8; }

		//"count:"
		public Keyword getCountKeyword_8_0() { return cCountKeyword_8_0; }

		//val=INT
		public Assignment getValAssignment_8_1() { return cValAssignment_8_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_8_1_0() { return cValINTTerminalRuleCall_8_1_0; }

		//";"
		public Keyword getSemicolonKeyword_8_2() { return cSemicolonKeyword_8_2; }

		//attributes+=Attribut*
		public Assignment getAttributesAssignment_9() { return cAttributesAssignment_9; }

		//Attribut
		public RuleCall getAttributesAttributParserRuleCall_9_0() { return cAttributesAttributParserRuleCall_9_0; }

		//instances+=Instance*
		public Assignment getInstancesAssignment_10() { return cInstancesAssignment_10; }

		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_10_0() { return cInstancesInstanceParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class AttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValeurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValeurVALParserRuleCall_2_0 = (RuleCall)cValeurAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attribut:
		//	name=ID ":" valeur=VAL ";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" valeur=VAL ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//valeur=VAL
		public Assignment getValeurAssignment_2() { return cValeurAssignment_2; }

		//VAL
		public RuleCall getValeurVALParserRuleCall_2_0() { return cValeurVALParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLEANTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VAL:
		//	BOOLEAN | INT | STRING;
		@Override public ParserRule getRule() { return rule; }

		//BOOLEAN | INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_0() { return cBOOLEANTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	
	
	private final ModelElements pModel;
	private final GraphElements pGraph;
	private final ImportElements pImport;
	private final CompFacetElements pCompFacet;
	private final ComponentElements pComponent;
	private final InstallerElements pInstaller;
	private final PropertyElements pProperty;
	private final ExtendsElements pExtends;
	private final ChildrenElements pChildren;
	private final ExportElements pExport;
	private final ExportVariableElements pExportVariable;
	private final InitialisationElements pInitialisation;
	private final ImportsElements pImports;
	private final ImportVariableElements pImportVariable;
	private final FacetsElements pFacets;
	private final FacetElements pFacet;
	private final InstanceElements pInstance;
	private final AttributElements pAttribut;
	private final VALElements pVAL;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tID;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RdslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGraph = new GraphElements();
		this.pImport = new ImportElements();
		this.pCompFacet = new CompFacetElements();
		this.pComponent = new ComponentElements();
		this.pInstaller = new InstallerElements();
		this.pProperty = new PropertyElements();
		this.pExtends = new ExtendsElements();
		this.pChildren = new ChildrenElements();
		this.pExport = new ExportElements();
		this.pExportVariable = new ExportVariableElements();
		this.pInitialisation = new InitialisationElements();
		this.pImports = new ImportsElements();
		this.pImportVariable = new ImportVariableElements();
		this.pFacets = new FacetsElements();
		this.pFacet = new FacetElements();
		this.pInstance = new InstanceElements();
		this.pAttribut = new AttributElements();
		this.pVAL = new VALElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Rdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	graphs=Graph | instances+=Instance*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Graph:
	//	imports+=Import* components+=Component+ facetGraphs+=Facet*;
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}

	//Import:
	//	"import" name=ID ".graph" ";";
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//CompFacet:
	//	Facet | Component;
	public CompFacetElements getCompFacetAccess() {
		return pCompFacet;
	}
	
	public ParserRule getCompFacetRule() {
		return getCompFacetAccess().getRule();
	}

	//Component:
	//	name=ID "{" installers=Installer properties+=Property* "}";
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//Installer:
	//	"installer:" name=ID ";";
	public InstallerElements getInstallerAccess() {
		return pInstaller;
	}
	
	public ParserRule getInstallerRule() {
		return getInstallerAccess().getRule();
	}

	//Property:
	//	Children | Export | Imports | Facets | Extends;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Extends:
	//	"extends:" supComponent=[Component];
	public ExtendsElements getExtendsAccess() {
		return pExtends;
	}
	
	public ParserRule getExtendsRule() {
		return getExtendsAccess().getRule();
	}

	//Children:
	//	"children:" (children+=[Component] ",")* child=[Component] ";";
	public ChildrenElements getChildrenAccess() {
		return pChildren;
	}
	
	public ParserRule getChildrenRule() {
		return getChildrenAccess().getRule();
	}

	//Export:
	//	"exports:" (exports+=exportVariable ",")* export=exportVariable ";";
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}

	//exportVariable:
	//	name=ID initial=Initialisation?;
	public ExportVariableElements getExportVariableAccess() {
		return pExportVariable;
	}
	
	public ParserRule getExportVariableRule() {
		return getExportVariableAccess().getRule();
	}

	//Initialisation:
	//	"=" val=INT;
	public InitialisationElements getInitialisationAccess() {
		return pInitialisation;
	}
	
	public ParserRule getInitialisationRule() {
		return getInitialisationAccess().getRule();
	}

	//Imports:
	//	"imports:" (imports+=importVariable ",")* imported=importVariable ";";
	public ImportsElements getImportsAccess() {
		return pImports;
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}

	//importVariable:
	//	"external"? (importvariable=[CompFacet] "." (name=ID | "*") | name=ID) optional?="(optional)"?;
	public ImportVariableElements getImportVariableAccess() {
		return pImportVariable;
	}
	
	public ParserRule getImportVariableRule() {
		return getImportVariableAccess().getRule();
	}

	//Facets:
	//	"facets:" (facets+=[Facet] ",")* facet=[Facet] ";";
	public FacetsElements getFacetsAccess() {
		return pFacets;
	}
	
	public ParserRule getFacetsRule() {
		return getFacetsAccess().getRule();
	}

	//Facet:
	//	"facet" name=ID "{" exportFacet+=Export* childrenFacet=Children? ("extends:" (supFacets+=[Facet] ",")*
	//	supFacet=[Facet])? "}";
	public FacetElements getFacetAccess() {
		return pFacet;
	}
	
	public ParserRule getFacetRule() {
		return getFacetAccess().getRule();
	}

	//Instance:
	//	"instance" "of" component=[Component] "{" "name:" name=ID (ID | INT)* ";" ("count:" val=INT ";")?
	//	attributes+=Attribut* instances+=Instance* "}";
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}

	//Attribut:
	//	name=ID ":" valeur=VAL ";";
	public AttributElements getAttributAccess() {
		return pAttribut;
	}
	
	public ParserRule getAttributRule() {
		return getAttributAccess().getRule();
	}

	//VAL:
	//	BOOLEAN | INT | STRING;
	public VALElements getVALAccess() {
		return pVAL;
	}
	
	public ParserRule getVALRule() {
		return getVALAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "-" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
