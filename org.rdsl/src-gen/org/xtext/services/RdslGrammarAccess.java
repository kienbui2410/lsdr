/*
 * generated by Xtext
 */
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RdslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGraphsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGraphsGraphParserRuleCall_0_0 = (RuleCall)cGraphsAssignment_0.eContents().get(0);
		private final Assignment cInstancesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInstancesInstanceParserRuleCall_1_0 = (RuleCall)cInstancesAssignment_1.eContents().get(0);
		
		//Model:
		//	graphs=Graph | instances+=Instance*;
		@Override public ParserRule getRule() { return rule; }

		//graphs=Graph | instances+=Instance*
		public Alternatives getAlternatives() { return cAlternatives; }

		//graphs=Graph
		public Assignment getGraphsAssignment_0() { return cGraphsAssignment_0; }

		//Graph
		public RuleCall getGraphsGraphParserRuleCall_0_0() { return cGraphsGraphParserRuleCall_0_0; }

		//instances+=Instance*
		public Assignment getInstancesAssignment_1() { return cInstancesAssignment_1; }

		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_1_0() { return cInstancesInstanceParserRuleCall_1_0; }
	}

	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Graph");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cComponentsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cComponentsComponentParserRuleCall_1_0 = (RuleCall)cComponentsAssignment_1.eContents().get(0);
		private final Assignment cFacetGraphsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFacetGraphsFacetParserRuleCall_2_0 = (RuleCall)cFacetGraphsAssignment_2.eContents().get(0);
		
		//Graph:
		//	(imports+=Import | components+=Component | facetGraphs+=Facet)+;
		@Override public ParserRule getRule() { return rule; }

		//(imports+=Import | components+=Component | facetGraphs+=Facet)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//imports+=Import
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//components+=Component
		public Assignment getComponentsAssignment_1() { return cComponentsAssignment_1; }

		//Component
		public RuleCall getComponentsComponentParserRuleCall_1_0() { return cComponentsComponentParserRuleCall_1_0; }

		//facetGraphs+=Facet
		public Assignment getFacetGraphsAssignment_2() { return cFacetGraphsAssignment_2; }

		//Facet
		public RuleCall getFacetGraphsFacetParserRuleCall_2_0() { return cFacetGraphsFacetParserRuleCall_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIImpotUriParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' importURI=ImpotUri ';';
		@Override public ParserRule getRule() { return rule; }

		//'import' importURI=ImpotUri ';'
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=ImpotUri
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//ImpotUri
		public RuleCall getImportURIImpotUriParserRuleCall_1_0() { return cImportURIImpotUriParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImpotUriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.ImpotUri");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cGraphKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ImpotUri:
		//	name=ID '.graph';
		@Override public ParserRule getRule() { return rule; }

		//name=ID '.graph'
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//'.graph'
		public Keyword getGraphKeyword_1() { return cGraphKeyword_1; }
	}

	public class CompFacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.CompFacet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFacetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CompFacet:
		//	Facet | Component;
		@Override public ParserRule getRule() { return rule; }

		//Facet | Component
		public Alternatives getAlternatives() { return cAlternatives; }

		//Facet
		public RuleCall getFacetParserRuleCall_0() { return cFacetParserRuleCall_0; }

		//Component
		public RuleCall getComponentParserRuleCall_1() { return cComponentParserRuleCall_1; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstallersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstallersInstallerParserRuleCall_2_0 = (RuleCall)cInstallersAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cChildrensAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cChildrensChildrenParserRuleCall_3_0_0 = (RuleCall)cChildrensAssignment_3_0.eContents().get(0);
		private final Assignment cExportsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cExportsExportParserRuleCall_3_1_0 = (RuleCall)cExportsAssignment_3_1.eContents().get(0);
		private final Assignment cImportsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cImportsImportsParserRuleCall_3_2_0 = (RuleCall)cImportsAssignment_3_2.eContents().get(0);
		private final Assignment cFacetsAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cFacetsFacetsParserRuleCall_3_3_0 = (RuleCall)cFacetsAssignment_3_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cExtendsExtendsParserRuleCall_3_4_0 = (RuleCall)cExtendsAssignment_3_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Component:
		//	name=ID '{'
		//	installers=Installer (childrens+=Children | exports+=Export | imports+=Imports | facets+=Facets | extends+=Extends)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//name=ID '{' installers=Installer (childrens+=Children | exports+=Export | imports+=Imports | facets+=Facets |
		//extends+=Extends)* '}'
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//installers=Installer
		public Assignment getInstallersAssignment_2() { return cInstallersAssignment_2; }

		//Installer
		public RuleCall getInstallersInstallerParserRuleCall_2_0() { return cInstallersInstallerParserRuleCall_2_0; }

		//(childrens+=Children | exports+=Export | imports+=Imports | facets+=Facets | extends+=Extends)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//childrens+=Children
		public Assignment getChildrensAssignment_3_0() { return cChildrensAssignment_3_0; }

		//Children
		public RuleCall getChildrensChildrenParserRuleCall_3_0_0() { return cChildrensChildrenParserRuleCall_3_0_0; }

		//exports+=Export
		public Assignment getExportsAssignment_3_1() { return cExportsAssignment_3_1; }

		//Export
		public RuleCall getExportsExportParserRuleCall_3_1_0() { return cExportsExportParserRuleCall_3_1_0; }

		//imports+=Imports
		public Assignment getImportsAssignment_3_2() { return cImportsAssignment_3_2; }

		//Imports
		public RuleCall getImportsImportsParserRuleCall_3_2_0() { return cImportsImportsParserRuleCall_3_2_0; }

		//facets+=Facets
		public Assignment getFacetsAssignment_3_3() { return cFacetsAssignment_3_3; }

		//Facets
		public RuleCall getFacetsFacetsParserRuleCall_3_3_0() { return cFacetsFacetsParserRuleCall_3_3_0; }

		//extends+=Extends
		public Assignment getExtendsAssignment_3_4() { return cExtendsAssignment_3_4; }

		//Extends
		public RuleCall getExtendsExtendsParserRuleCall_3_4_0() { return cExtendsExtendsParserRuleCall_3_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InstallerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Installer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstallerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Installer:
		//	'installer' ':' name=ID ';';
		@Override public ParserRule getRule() { return rule; }

		//'installer' ':' name=ID ';'
		public Group getGroup() { return cGroup; }

		//'installer'
		public Keyword getInstallerKeyword_0() { return cInstallerKeyword_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ExtendsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Extends");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSupComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSupComponentComponentCrossReference_2_0 = (CrossReference)cSupComponentAssignment_2.eContents().get(0);
		private final RuleCall cSupComponentComponentIDTerminalRuleCall_2_0_1 = (RuleCall)cSupComponentComponentCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Extends:
		//	'extends' ':' supComponent=[Component] ';';
		@Override public ParserRule getRule() { return rule; }

		//'extends' ':' supComponent=[Component] ';'
		public Group getGroup() { return cGroup; }

		//'extends'
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//supComponent=[Component]
		public Assignment getSupComponentAssignment_2() { return cSupComponentAssignment_2; }

		//[Component]
		public CrossReference getSupComponentComponentCrossReference_2_0() { return cSupComponentComponentCrossReference_2_0; }

		//ID
		public RuleCall getSupComponentComponentIDTerminalRuleCall_2_0_1() { return cSupComponentComponentIDTerminalRuleCall_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ChildrenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Children");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChildrenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cChildrenAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cChildrenComponentCrossReference_2_0_0 = (CrossReference)cChildrenAssignment_2_0.eContents().get(0);
		private final RuleCall cChildrenComponentIDTerminalRuleCall_2_0_0_1 = (RuleCall)cChildrenComponentCrossReference_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cChildAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cChildComponentCrossReference_3_0 = (CrossReference)cChildAssignment_3.eContents().get(0);
		private final RuleCall cChildComponentIDTerminalRuleCall_3_0_1 = (RuleCall)cChildComponentCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Children:
		//	'children' ':' (children+=[Component] ',')* child=[Component] ';';
		@Override public ParserRule getRule() { return rule; }

		//'children' ':' (children+=[Component] ',')* child=[Component] ';'
		public Group getGroup() { return cGroup; }

		//'children'
		public Keyword getChildrenKeyword_0() { return cChildrenKeyword_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(children+=[Component] ',')*
		public Group getGroup_2() { return cGroup_2; }

		//children+=[Component]
		public Assignment getChildrenAssignment_2_0() { return cChildrenAssignment_2_0; }

		//[Component]
		public CrossReference getChildrenComponentCrossReference_2_0_0() { return cChildrenComponentCrossReference_2_0_0; }

		//ID
		public RuleCall getChildrenComponentIDTerminalRuleCall_2_0_0_1() { return cChildrenComponentIDTerminalRuleCall_2_0_0_1; }

		//','
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//child=[Component]
		public Assignment getChildAssignment_3() { return cChildAssignment_3; }

		//[Component]
		public CrossReference getChildComponentCrossReference_3_0() { return cChildComponentCrossReference_3_0; }

		//ID
		public RuleCall getChildComponentIDTerminalRuleCall_3_0_1() { return cChildComponentIDTerminalRuleCall_3_0_1; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExportsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExportsExportVariableParserRuleCall_2_0_0 = (RuleCall)cExportsAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExportAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExportExportVariableParserRuleCall_3_0 = (RuleCall)cExportAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Export:
		//	'exports' ':' (exports+=exportVariable ',')* export=exportVariable ';';
		@Override public ParserRule getRule() { return rule; }

		//'exports' ':' (exports+=exportVariable ',')* export=exportVariable ';'
		public Group getGroup() { return cGroup; }

		//'exports'
		public Keyword getExportsKeyword_0() { return cExportsKeyword_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(exports+=exportVariable ',')*
		public Group getGroup_2() { return cGroup_2; }

		//exports+=exportVariable
		public Assignment getExportsAssignment_2_0() { return cExportsAssignment_2_0; }

		//exportVariable
		public RuleCall getExportsExportVariableParserRuleCall_2_0_0() { return cExportsExportVariableParserRuleCall_2_0_0; }

		//','
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//export=exportVariable
		public Assignment getExportAssignment_3() { return cExportAssignment_3; }

		//exportVariable
		public RuleCall getExportExportVariableParserRuleCall_3_0() { return cExportExportVariableParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ExportVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.exportVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitialInitialisationParserRuleCall_1_0 = (RuleCall)cInitialAssignment_1.eContents().get(0);
		
		//exportVariable:
		//	name=ID initial=Initialisation?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID initial=Initialisation?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//initial=Initialisation?
		public Assignment getInitialAssignment_1() { return cInitialAssignment_1; }

		//Initialisation
		public RuleCall getInitialInitialisationParserRuleCall_1_0() { return cInitialInitialisationParserRuleCall_1_0; }
	}

	public class InitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Initialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//Initialisation:
		//	'=' val=INT;
		@Override public ParserRule getRule() { return rule; }

		//'=' val=INT
		public Group getGroup() { return cGroup; }

		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }
	}

	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cImportsImportVariableParserRuleCall_2_0_0 = (RuleCall)cImportsAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cImportedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportedImportVariableParserRuleCall_3_0 = (RuleCall)cImportedAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Imports:
		//	'imports' ':' (imports+=importVariable ',')* imported=importVariable ';';
		@Override public ParserRule getRule() { return rule; }

		//'imports' ':' (imports+=importVariable ',')* imported=importVariable ';'
		public Group getGroup() { return cGroup; }

		//'imports'
		public Keyword getImportsKeyword_0() { return cImportsKeyword_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(imports+=importVariable ',')*
		public Group getGroup_2() { return cGroup_2; }

		//imports+=importVariable
		public Assignment getImportsAssignment_2_0() { return cImportsAssignment_2_0; }

		//importVariable
		public RuleCall getImportsImportVariableParserRuleCall_2_0_0() { return cImportsImportVariableParserRuleCall_2_0_0; }

		//','
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//imported=importVariable
		public Assignment getImportedAssignment_3() { return cImportedAssignment_3; }

		//importVariable
		public RuleCall getImportedImportVariableParserRuleCall_3_0() { return cImportedImportVariableParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ImportVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.importVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExternalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExternalExternalKeyword_0_0 = (Keyword)cExternalAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cImportvariableAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cImportvariableCompFacetCrossReference_1_0_0_0 = (CrossReference)cImportvariableAssignment_1_0_0.eContents().get(0);
		private final RuleCall cImportvariableCompFacetIDTerminalRuleCall_1_0_0_0_1 = (RuleCall)cImportvariableCompFacetCrossReference_1_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final Assignment cNameAssignment_1_0_2_0 = (Assignment)cAlternatives_1_0_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_2_0_0 = (RuleCall)cNameAssignment_1_0_2_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_2_1 = (Keyword)cAlternatives_1_0_2.eContents().get(1);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOptionalOptionalKeyword_2_0 = (Keyword)cOptionalAssignment_2.eContents().get(0);
		
		//importVariable:
		//	external?='external'? (importvariable=[CompFacet] '.' (name=ID | '*') | name=ID) optional?='(optional)'?;
		@Override public ParserRule getRule() { return rule; }

		//external?='external'? (importvariable=[CompFacet] '.' (name=ID | '*') | name=ID) optional?='(optional)'?
		public Group getGroup() { return cGroup; }

		//external?='external'?
		public Assignment getExternalAssignment_0() { return cExternalAssignment_0; }

		//'external'
		public Keyword getExternalExternalKeyword_0_0() { return cExternalExternalKeyword_0_0; }

		//(importvariable=[CompFacet] '.' (name=ID | '*') | name=ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//importvariable=[CompFacet] '.' (name=ID | '*')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//importvariable=[CompFacet]
		public Assignment getImportvariableAssignment_1_0_0() { return cImportvariableAssignment_1_0_0; }

		//[CompFacet]
		public CrossReference getImportvariableCompFacetCrossReference_1_0_0_0() { return cImportvariableCompFacetCrossReference_1_0_0_0; }

		//ID
		public RuleCall getImportvariableCompFacetIDTerminalRuleCall_1_0_0_0_1() { return cImportvariableCompFacetIDTerminalRuleCall_1_0_0_0_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//(name=ID | '*')
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }

		//name=ID
		public Assignment getNameAssignment_1_0_2_0() { return cNameAssignment_1_0_2_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_2_0_0() { return cNameIDTerminalRuleCall_1_0_2_0_0; }

		//'*'
		public Keyword getAsteriskKeyword_1_0_2_1() { return cAsteriskKeyword_1_0_2_1; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//optional?='(optional)'?
		public Assignment getOptionalAssignment_2() { return cOptionalAssignment_2; }

		//'(optional)'
		public Keyword getOptionalOptionalKeyword_2_0() { return cOptionalOptionalKeyword_2_0; }
	}

	public class FacetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Facets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFacetsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFacetsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cFacetsFacetCrossReference_2_0_0 = (CrossReference)cFacetsAssignment_2_0.eContents().get(0);
		private final RuleCall cFacetsFacetIDTerminalRuleCall_2_0_0_1 = (RuleCall)cFacetsFacetCrossReference_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFacetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFacetFacetCrossReference_3_0 = (CrossReference)cFacetAssignment_3.eContents().get(0);
		private final RuleCall cFacetFacetIDTerminalRuleCall_3_0_1 = (RuleCall)cFacetFacetCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Facets:
		//	'facets' ':' (facets+=[Facet] ',')* facet=[Facet] ';';
		@Override public ParserRule getRule() { return rule; }

		//'facets' ':' (facets+=[Facet] ',')* facet=[Facet] ';'
		public Group getGroup() { return cGroup; }

		//'facets'
		public Keyword getFacetsKeyword_0() { return cFacetsKeyword_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(facets+=[Facet] ',')*
		public Group getGroup_2() { return cGroup_2; }

		//facets+=[Facet]
		public Assignment getFacetsAssignment_2_0() { return cFacetsAssignment_2_0; }

		//[Facet]
		public CrossReference getFacetsFacetCrossReference_2_0_0() { return cFacetsFacetCrossReference_2_0_0; }

		//ID
		public RuleCall getFacetsFacetIDTerminalRuleCall_2_0_0_1() { return cFacetsFacetIDTerminalRuleCall_2_0_0_1; }

		//','
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//facet=[Facet]
		public Assignment getFacetAssignment_3() { return cFacetAssignment_3; }

		//[Facet]
		public CrossReference getFacetFacetCrossReference_3_0() { return cFacetFacetCrossReference_3_0; }

		//ID
		public RuleCall getFacetFacetIDTerminalRuleCall_3_0_1() { return cFacetFacetIDTerminalRuleCall_3_0_1; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class FacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Facet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFacetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExportFacetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExportFacetExportParserRuleCall_3_0 = (RuleCall)cExportFacetAssignment_3.eContents().get(0);
		private final Assignment cChildrenFacetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChildrenFacetChildrenParserRuleCall_4_0 = (RuleCall)cChildrenFacetAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Assignment cSupFacetsAssignment_5_2_0 = (Assignment)cGroup_5_2.eContents().get(0);
		private final CrossReference cSupFacetsFacetCrossReference_5_2_0_0 = (CrossReference)cSupFacetsAssignment_5_2_0.eContents().get(0);
		private final RuleCall cSupFacetsFacetIDTerminalRuleCall_5_2_0_0_1 = (RuleCall)cSupFacetsFacetCrossReference_5_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_5_2_1 = (Keyword)cGroup_5_2.eContents().get(1);
		private final Assignment cSupFacetAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final CrossReference cSupFacetFacetCrossReference_5_3_0 = (CrossReference)cSupFacetAssignment_5_3.eContents().get(0);
		private final RuleCall cSupFacetFacetIDTerminalRuleCall_5_3_0_1 = (RuleCall)cSupFacetFacetCrossReference_5_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Facet:
		//	'facet' name=ID '{'
		//	exportFacet+=Export*
		//	childrenFacet=Children? ('extends' ':' (supFacets+=[Facet] ',')* supFacet=[Facet])?
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'facet' name=ID '{' exportFacet+=Export* childrenFacet=Children? ('extends' ':' (supFacets+=[Facet] ',')*
		//supFacet=[Facet])? '}'
		public Group getGroup() { return cGroup; }

		//'facet'
		public Keyword getFacetKeyword_0() { return cFacetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//exportFacet+=Export*
		public Assignment getExportFacetAssignment_3() { return cExportFacetAssignment_3; }

		//Export
		public RuleCall getExportFacetExportParserRuleCall_3_0() { return cExportFacetExportParserRuleCall_3_0; }

		//childrenFacet=Children?
		public Assignment getChildrenFacetAssignment_4() { return cChildrenFacetAssignment_4; }

		//Children
		public RuleCall getChildrenFacetChildrenParserRuleCall_4_0() { return cChildrenFacetChildrenParserRuleCall_4_0; }

		//('extends' ':' (supFacets+=[Facet] ',')* supFacet=[Facet])?
		public Group getGroup_5() { return cGroup_5; }

		//'extends'
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }

		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//(supFacets+=[Facet] ',')*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//supFacets+=[Facet]
		public Assignment getSupFacetsAssignment_5_2_0() { return cSupFacetsAssignment_5_2_0; }

		//[Facet]
		public CrossReference getSupFacetsFacetCrossReference_5_2_0_0() { return cSupFacetsFacetCrossReference_5_2_0_0; }

		//ID
		public RuleCall getSupFacetsFacetIDTerminalRuleCall_5_2_0_0_1() { return cSupFacetsFacetIDTerminalRuleCall_5_2_0_0_1; }

		//','
		public Keyword getCommaKeyword_5_2_1() { return cCommaKeyword_5_2_1; }

		//supFacet=[Facet]
		public Assignment getSupFacetAssignment_5_3() { return cSupFacetAssignment_5_3; }

		//[Facet]
		public CrossReference getSupFacetFacetCrossReference_5_3_0() { return cSupFacetFacetCrossReference_5_3_0; }

		//ID
		public RuleCall getSupFacetFacetIDTerminalRuleCall_5_3_0_1() { return cSupFacetFacetIDTerminalRuleCall_5_3_0_1; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cComponentComponentCrossReference_2_0 = (CrossReference)cComponentAssignment_2.eContents().get(0);
		private final RuleCall cComponentComponentIDTerminalRuleCall_2_0_1 = (RuleCall)cComponentComponentCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInstancesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstancesInstanceParserRuleCall_4_0 = (RuleCall)cInstancesAssignment_4.eContents().get(0);
		private final Keyword cNameKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNameIDTerminalRuleCall_7_0 = (RuleCall)cNameAssignment_7.eContents().get(0);
		private final Assignment cFullnameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFullnameFullnameParserRuleCall_8_0 = (RuleCall)cFullnameAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCountKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cColonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cValAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cValINTTerminalRuleCall_10_2_0 = (RuleCall)cValAssignment_10_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cNumInstancesKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cColonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cValnumAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cValnumINTTerminalRuleCall_11_2_0 = (RuleCall)cValnumAssignment_11_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cMinAllowedInstancesKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cValminAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cValminINTTerminalRuleCall_12_2_0 = (RuleCall)cValminAssignment_12_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cMaxAllowedInstancesKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cColonKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cValmaxAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cValmaxINTTerminalRuleCall_13_2_0 = (RuleCall)cValmaxAssignment_13_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cAdressTypeKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cColonKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cIpAddressAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cIpAddressATypeParserRuleCall_14_2_0 = (RuleCall)cIpAddressAssignment_14_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cIpv4Keyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cAddressKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cColonKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Group cGroup_15_3 = (Group)cGroup_15.eContents().get(3);
		private final Group cGroup_15_3_0 = (Group)cGroup_15_3.eContents().get(0);
		private final Assignment cIp4Assignment_15_3_0_0 = (Assignment)cGroup_15_3_0.eContents().get(0);
		private final RuleCall cIp4INTTerminalRuleCall_15_3_0_0_0 = (RuleCall)cIp4Assignment_15_3_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_15_3_0_1 = (Keyword)cGroup_15_3_0.eContents().get(1);
		private final Assignment cIp4lastAssignment_15_3_1 = (Assignment)cGroup_15_3.eContents().get(1);
		private final RuleCall cIp4lastINTTerminalRuleCall_15_3_1_0 = (RuleCall)cIp4lastAssignment_15_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cIpv6Keyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Keyword cAddressKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cColonKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Group cGroup_16_3 = (Group)cGroup_16.eContents().get(3);
		private final Group cGroup_16_3_0 = (Group)cGroup_16_3.eContents().get(0);
		private final Assignment cIp6Assignment_16_3_0_0 = (Assignment)cGroup_16_3_0.eContents().get(0);
		private final RuleCall cIp6INTTerminalRuleCall_16_3_0_0_0 = (RuleCall)cIp6Assignment_16_3_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_16_3_0_1 = (Keyword)cGroup_16_3_0.eContents().get(1);
		private final Assignment cIp6lastAssignment_16_3_1 = (Assignment)cGroup_16_3.eContents().get(1);
		private final RuleCall cIp6lastINTTerminalRuleCall_16_3_1_0 = (RuleCall)cIp6lastAssignment_16_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_16_4 = (Keyword)cGroup_16.eContents().get(4);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cLoadKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Keyword cColonKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Assignment cTheLoadAssignment_17_2 = (Assignment)cGroup_17.eContents().get(2);
		private final RuleCall cTheLoadINTTerminalRuleCall_17_2_0 = (RuleCall)cTheLoadAssignment_17_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_17_3 = (Keyword)cGroup_17.eContents().get(3);
		private final Group cGroup_18 = (Group)cGroup.eContents().get(18);
		private final Keyword cStateKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final Keyword cColonKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Assignment cTheStateAssignment_18_2 = (Assignment)cGroup_18.eContents().get(2);
		private final Alternatives cTheStateAlternatives_18_2_0 = (Alternatives)cTheStateAssignment_18_2.eContents().get(0);
		private final Keyword cTheStatePublicKeyword_18_2_0_0 = (Keyword)cTheStateAlternatives_18_2_0.eContents().get(0);
		private final Keyword cTheStatePrivateKeyword_18_2_0_1 = (Keyword)cTheStateAlternatives_18_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_18_3 = (Keyword)cGroup_18.eContents().get(3);
		private final Group cGroup_19 = (Group)cGroup.eContents().get(19);
		private final Keyword cHostnameKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final Keyword cColonKeyword_19_1 = (Keyword)cGroup_19.eContents().get(1);
		private final Assignment cHostnameAssignment_19_2 = (Assignment)cGroup_19.eContents().get(2);
		private final RuleCall cHostnameIDTerminalRuleCall_19_2_0 = (RuleCall)cHostnameAssignment_19_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_19_3 = (Keyword)cGroup_19.eContents().get(3);
		private final Assignment cIptableAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cIptableIpTableParserRuleCall_20_0 = (RuleCall)cIptableAssignment_20.eContents().get(0);
		private final Assignment cAttributesAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cAttributesAttributParserRuleCall_21_0 = (RuleCall)cAttributesAssignment_21.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_22 = (Keyword)cGroup.eContents().get(22);
		
		//Instance:
		//	'instance' 'of' component=[Component] '{'
		//	instances+=Instance*
		//	'name' ':' name=ID fullname+=Fullname* ';' ('count' ':' val=INT ';')? ('numInstances' ':' valnum=INT ';')?
		//	('minAllowedInstances' ':' valmin=INT ';')? ('maxAllowedInstances' ':' valmax=INT ';')? ('adressType' ':'
		//	ipAddress=AType ';')? ('ipv4' 'address' ':' ((ip4+=INT '.')* ip4last=INT) ';')? ('ipv6' 'address' ':' ((ip6+=INT '.')*
		//	ip6last=INT) ';')? ('load' ':' theLoad=INT ';')? ('state' ':' theState=('public' | 'private') ';')? ('hostname' ':'
		//	hostname=ID ';')?
		//	iptable+=IpTable*
		//	attributes+=Attribut*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'instance' 'of' component=[Component] '{' instances+=Instance* 'name' ':' name=ID fullname+=Fullname* ';' ('count' ':'
		//val=INT ';')? ('numInstances' ':' valnum=INT ';')? ('minAllowedInstances' ':' valmin=INT ';')? ('maxAllowedInstances'
		//':' valmax=INT ';')? ('adressType' ':' ipAddress=AType ';')? ('ipv4' 'address' ':' ((ip4+=INT '.')* ip4last=INT) ';')?
		//('ipv6' 'address' ':' ((ip6+=INT '.')* ip6last=INT) ';')? ('load' ':' theLoad=INT ';')? ('state' ':' theState=('public'
		//| 'private') ';')? ('hostname' ':' hostname=ID ';')? iptable+=IpTable* attributes+=Attribut* '}'
		public Group getGroup() { return cGroup; }

		//'instance'
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }

		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//component=[Component]
		public Assignment getComponentAssignment_2() { return cComponentAssignment_2; }

		//[Component]
		public CrossReference getComponentComponentCrossReference_2_0() { return cComponentComponentCrossReference_2_0; }

		//ID
		public RuleCall getComponentComponentIDTerminalRuleCall_2_0_1() { return cComponentComponentIDTerminalRuleCall_2_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//instances+=Instance*
		public Assignment getInstancesAssignment_4() { return cInstancesAssignment_4; }

		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_4_0() { return cInstancesInstanceParserRuleCall_4_0; }

		//'name'
		public Keyword getNameKeyword_5() { return cNameKeyword_5; }

		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//name=ID
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_7_0() { return cNameIDTerminalRuleCall_7_0; }

		//fullname+=Fullname*
		public Assignment getFullnameAssignment_8() { return cFullnameAssignment_8; }

		//Fullname
		public RuleCall getFullnameFullnameParserRuleCall_8_0() { return cFullnameFullnameParserRuleCall_8_0; }

		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }

		//('count' ':' val=INT ';')?
		public Group getGroup_10() { return cGroup_10; }

		//'count'
		public Keyword getCountKeyword_10_0() { return cCountKeyword_10_0; }

		//':'
		public Keyword getColonKeyword_10_1() { return cColonKeyword_10_1; }

		//val=INT
		public Assignment getValAssignment_10_2() { return cValAssignment_10_2; }

		//INT
		public RuleCall getValINTTerminalRuleCall_10_2_0() { return cValINTTerminalRuleCall_10_2_0; }

		//';'
		public Keyword getSemicolonKeyword_10_3() { return cSemicolonKeyword_10_3; }

		//('numInstances' ':' valnum=INT ';')?
		public Group getGroup_11() { return cGroup_11; }

		//'numInstances'
		public Keyword getNumInstancesKeyword_11_0() { return cNumInstancesKeyword_11_0; }

		//':'
		public Keyword getColonKeyword_11_1() { return cColonKeyword_11_1; }

		//valnum=INT
		public Assignment getValnumAssignment_11_2() { return cValnumAssignment_11_2; }

		//INT
		public RuleCall getValnumINTTerminalRuleCall_11_2_0() { return cValnumINTTerminalRuleCall_11_2_0; }

		//';'
		public Keyword getSemicolonKeyword_11_3() { return cSemicolonKeyword_11_3; }

		//('minAllowedInstances' ':' valmin=INT ';')?
		public Group getGroup_12() { return cGroup_12; }

		//'minAllowedInstances'
		public Keyword getMinAllowedInstancesKeyword_12_0() { return cMinAllowedInstancesKeyword_12_0; }

		//':'
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }

		//valmin=INT
		public Assignment getValminAssignment_12_2() { return cValminAssignment_12_2; }

		//INT
		public RuleCall getValminINTTerminalRuleCall_12_2_0() { return cValminINTTerminalRuleCall_12_2_0; }

		//';'
		public Keyword getSemicolonKeyword_12_3() { return cSemicolonKeyword_12_3; }

		//('maxAllowedInstances' ':' valmax=INT ';')?
		public Group getGroup_13() { return cGroup_13; }

		//'maxAllowedInstances'
		public Keyword getMaxAllowedInstancesKeyword_13_0() { return cMaxAllowedInstancesKeyword_13_0; }

		//':'
		public Keyword getColonKeyword_13_1() { return cColonKeyword_13_1; }

		//valmax=INT
		public Assignment getValmaxAssignment_13_2() { return cValmaxAssignment_13_2; }

		//INT
		public RuleCall getValmaxINTTerminalRuleCall_13_2_0() { return cValmaxINTTerminalRuleCall_13_2_0; }

		//';'
		public Keyword getSemicolonKeyword_13_3() { return cSemicolonKeyword_13_3; }

		//('adressType' ':' ipAddress=AType ';')?
		public Group getGroup_14() { return cGroup_14; }

		//'adressType'
		public Keyword getAdressTypeKeyword_14_0() { return cAdressTypeKeyword_14_0; }

		//':'
		public Keyword getColonKeyword_14_1() { return cColonKeyword_14_1; }

		//ipAddress=AType
		public Assignment getIpAddressAssignment_14_2() { return cIpAddressAssignment_14_2; }

		//AType
		public RuleCall getIpAddressATypeParserRuleCall_14_2_0() { return cIpAddressATypeParserRuleCall_14_2_0; }

		//';'
		public Keyword getSemicolonKeyword_14_3() { return cSemicolonKeyword_14_3; }

		//('ipv4' 'address' ':' ((ip4+=INT '.')* ip4last=INT) ';')?
		public Group getGroup_15() { return cGroup_15; }

		//'ipv4'
		public Keyword getIpv4Keyword_15_0() { return cIpv4Keyword_15_0; }

		//'address'
		public Keyword getAddressKeyword_15_1() { return cAddressKeyword_15_1; }

		//':'
		public Keyword getColonKeyword_15_2() { return cColonKeyword_15_2; }

		//((ip4+=INT '.')* ip4last=INT)
		public Group getGroup_15_3() { return cGroup_15_3; }

		//(ip4+=INT '.')*
		public Group getGroup_15_3_0() { return cGroup_15_3_0; }

		//ip4+=INT
		public Assignment getIp4Assignment_15_3_0_0() { return cIp4Assignment_15_3_0_0; }

		//INT
		public RuleCall getIp4INTTerminalRuleCall_15_3_0_0_0() { return cIp4INTTerminalRuleCall_15_3_0_0_0; }

		//'.'
		public Keyword getFullStopKeyword_15_3_0_1() { return cFullStopKeyword_15_3_0_1; }

		//ip4last=INT
		public Assignment getIp4lastAssignment_15_3_1() { return cIp4lastAssignment_15_3_1; }

		//INT
		public RuleCall getIp4lastINTTerminalRuleCall_15_3_1_0() { return cIp4lastINTTerminalRuleCall_15_3_1_0; }

		//';'
		public Keyword getSemicolonKeyword_15_4() { return cSemicolonKeyword_15_4; }

		//('ipv6' 'address' ':' ((ip6+=INT '.')* ip6last=INT) ';')?
		public Group getGroup_16() { return cGroup_16; }

		//'ipv6'
		public Keyword getIpv6Keyword_16_0() { return cIpv6Keyword_16_0; }

		//'address'
		public Keyword getAddressKeyword_16_1() { return cAddressKeyword_16_1; }

		//':'
		public Keyword getColonKeyword_16_2() { return cColonKeyword_16_2; }

		//((ip6+=INT '.')* ip6last=INT)
		public Group getGroup_16_3() { return cGroup_16_3; }

		//(ip6+=INT '.')*
		public Group getGroup_16_3_0() { return cGroup_16_3_0; }

		//ip6+=INT
		public Assignment getIp6Assignment_16_3_0_0() { return cIp6Assignment_16_3_0_0; }

		//INT
		public RuleCall getIp6INTTerminalRuleCall_16_3_0_0_0() { return cIp6INTTerminalRuleCall_16_3_0_0_0; }

		//'.'
		public Keyword getFullStopKeyword_16_3_0_1() { return cFullStopKeyword_16_3_0_1; }

		//ip6last=INT
		public Assignment getIp6lastAssignment_16_3_1() { return cIp6lastAssignment_16_3_1; }

		//INT
		public RuleCall getIp6lastINTTerminalRuleCall_16_3_1_0() { return cIp6lastINTTerminalRuleCall_16_3_1_0; }

		//';'
		public Keyword getSemicolonKeyword_16_4() { return cSemicolonKeyword_16_4; }

		//('load' ':' theLoad=INT ';')?
		public Group getGroup_17() { return cGroup_17; }

		//'load'
		public Keyword getLoadKeyword_17_0() { return cLoadKeyword_17_0; }

		//':'
		public Keyword getColonKeyword_17_1() { return cColonKeyword_17_1; }

		//theLoad=INT
		public Assignment getTheLoadAssignment_17_2() { return cTheLoadAssignment_17_2; }

		//INT
		public RuleCall getTheLoadINTTerminalRuleCall_17_2_0() { return cTheLoadINTTerminalRuleCall_17_2_0; }

		//';'
		public Keyword getSemicolonKeyword_17_3() { return cSemicolonKeyword_17_3; }

		//('state' ':' theState=('public' | 'private') ';')?
		public Group getGroup_18() { return cGroup_18; }

		//'state'
		public Keyword getStateKeyword_18_0() { return cStateKeyword_18_0; }

		//':'
		public Keyword getColonKeyword_18_1() { return cColonKeyword_18_1; }

		//theState=('public' | 'private')
		public Assignment getTheStateAssignment_18_2() { return cTheStateAssignment_18_2; }

		//('public' | 'private')
		public Alternatives getTheStateAlternatives_18_2_0() { return cTheStateAlternatives_18_2_0; }

		//'public'
		public Keyword getTheStatePublicKeyword_18_2_0_0() { return cTheStatePublicKeyword_18_2_0_0; }

		//'private'
		public Keyword getTheStatePrivateKeyword_18_2_0_1() { return cTheStatePrivateKeyword_18_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_18_3() { return cSemicolonKeyword_18_3; }

		//('hostname' ':' hostname=ID ';')?
		public Group getGroup_19() { return cGroup_19; }

		//'hostname'
		public Keyword getHostnameKeyword_19_0() { return cHostnameKeyword_19_0; }

		//':'
		public Keyword getColonKeyword_19_1() { return cColonKeyword_19_1; }

		//hostname=ID
		public Assignment getHostnameAssignment_19_2() { return cHostnameAssignment_19_2; }

		//ID
		public RuleCall getHostnameIDTerminalRuleCall_19_2_0() { return cHostnameIDTerminalRuleCall_19_2_0; }

		//';'
		public Keyword getSemicolonKeyword_19_3() { return cSemicolonKeyword_19_3; }

		//iptable+=IpTable*
		public Assignment getIptableAssignment_20() { return cIptableAssignment_20; }

		//IpTable
		public RuleCall getIptableIpTableParserRuleCall_20_0() { return cIptableIpTableParserRuleCall_20_0; }

		//attributes+=Attribut*
		public Assignment getAttributesAssignment_21() { return cAttributesAssignment_21; }

		//Attribut
		public RuleCall getAttributesAttributParserRuleCall_21_0() { return cAttributesAttributParserRuleCall_21_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_22() { return cRightCurlyBracketKeyword_22; }
	}

	public class IpTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.IpTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIptablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrafficAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTrafficAlternatives_2_0 = (Alternatives)cTrafficAssignment_2.eContents().get(0);
		private final Keyword cTrafficINPUTKeyword_2_0_0 = (Keyword)cTrafficAlternatives_2_0.eContents().get(0);
		private final Keyword cTrafficOUTPUTKeyword_2_0_1 = (Keyword)cTrafficAlternatives_2_0.eContents().get(1);
		private final Keyword cTrafficFORWARDKeyword_2_0_2 = (Keyword)cTrafficAlternatives_2_0.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cSourceAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cSourceINTTerminalRuleCall_3_1_0_0 = (RuleCall)cSourceAssignment_3_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSourcefinalAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cSourcefinalINTTerminalRuleCall_3_2_0 = (RuleCall)cSourcefinalAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cDestinationAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cDestinationINTTerminalRuleCall_4_1_0_0 = (RuleCall)cDestinationAssignment_4_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cDestinationfinalAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDestinationfinalINTTerminalRuleCall_4_2_0 = (RuleCall)cDestinationfinalAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cProtocolAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cProtocolAlternatives_5_1_0 = (Alternatives)cProtocolAssignment_5_1.eContents().get(0);
		private final Keyword cProtocolTcpKeyword_5_1_0_0 = (Keyword)cProtocolAlternatives_5_1_0.eContents().get(0);
		private final Keyword cProtocolUdpKeyword_5_1_0_1 = (Keyword)cProtocolAlternatives_5_1_0.eContents().get(1);
		private final Keyword cJKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cTargetAlternatives_7_0 = (Alternatives)cTargetAssignment_7.eContents().get(0);
		private final Keyword cTargetACCEPTKeyword_7_0_0 = (Keyword)cTargetAlternatives_7_0.eContents().get(0);
		private final Keyword cTargetREJECTKeyword_7_0_1 = (Keyword)cTargetAlternatives_7_0.eContents().get(1);
		private final Keyword cTargetDROPKeyword_7_0_2 = (Keyword)cTargetAlternatives_7_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//IpTable:
		//	'iptables' '-A' traffic=('INPUT' | 'OUTPUT' | 'FORWARD') ('-s' (source+=INT '.')+ sourcefinal=INT) ('-d'
		//	(destination+=INT '.')+ destinationfinal=INT) ('-p' protocol=('tcp' | 'udp')) '-j' target=('ACCEPT' | 'REJECT' |
		//	'DROP') ';';
		@Override public ParserRule getRule() { return rule; }

		//'iptables' '-A' traffic=('INPUT' | 'OUTPUT' | 'FORWARD') ('-s' (source+=INT '.')+ sourcefinal=INT) ('-d'
		//(destination+=INT '.')+ destinationfinal=INT) ('-p' protocol=('tcp' | 'udp')) '-j' target=('ACCEPT' | 'REJECT' |
		//'DROP') ';'
		public Group getGroup() { return cGroup; }

		//'iptables'
		public Keyword getIptablesKeyword_0() { return cIptablesKeyword_0; }

		//'-A'
		public Keyword getAKeyword_1() { return cAKeyword_1; }

		//traffic=('INPUT' | 'OUTPUT' | 'FORWARD')
		public Assignment getTrafficAssignment_2() { return cTrafficAssignment_2; }

		//('INPUT' | 'OUTPUT' | 'FORWARD')
		public Alternatives getTrafficAlternatives_2_0() { return cTrafficAlternatives_2_0; }

		//'INPUT'
		public Keyword getTrafficINPUTKeyword_2_0_0() { return cTrafficINPUTKeyword_2_0_0; }

		//'OUTPUT'
		public Keyword getTrafficOUTPUTKeyword_2_0_1() { return cTrafficOUTPUTKeyword_2_0_1; }

		//'FORWARD'
		public Keyword getTrafficFORWARDKeyword_2_0_2() { return cTrafficFORWARDKeyword_2_0_2; }

		//('-s' (source+=INT '.')+ sourcefinal=INT)
		public Group getGroup_3() { return cGroup_3; }

		//'-s'
		public Keyword getSKeyword_3_0() { return cSKeyword_3_0; }

		//(source+=INT '.')+
		public Group getGroup_3_1() { return cGroup_3_1; }

		//source+=INT
		public Assignment getSourceAssignment_3_1_0() { return cSourceAssignment_3_1_0; }

		//INT
		public RuleCall getSourceINTTerminalRuleCall_3_1_0_0() { return cSourceINTTerminalRuleCall_3_1_0_0; }

		//'.'
		public Keyword getFullStopKeyword_3_1_1() { return cFullStopKeyword_3_1_1; }

		//sourcefinal=INT
		public Assignment getSourcefinalAssignment_3_2() { return cSourcefinalAssignment_3_2; }

		//INT
		public RuleCall getSourcefinalINTTerminalRuleCall_3_2_0() { return cSourcefinalINTTerminalRuleCall_3_2_0; }

		//('-d' (destination+=INT '.')+ destinationfinal=INT)
		public Group getGroup_4() { return cGroup_4; }

		//'-d'
		public Keyword getDKeyword_4_0() { return cDKeyword_4_0; }

		//(destination+=INT '.')+
		public Group getGroup_4_1() { return cGroup_4_1; }

		//destination+=INT
		public Assignment getDestinationAssignment_4_1_0() { return cDestinationAssignment_4_1_0; }

		//INT
		public RuleCall getDestinationINTTerminalRuleCall_4_1_0_0() { return cDestinationINTTerminalRuleCall_4_1_0_0; }

		//'.'
		public Keyword getFullStopKeyword_4_1_1() { return cFullStopKeyword_4_1_1; }

		//destinationfinal=INT
		public Assignment getDestinationfinalAssignment_4_2() { return cDestinationfinalAssignment_4_2; }

		//INT
		public RuleCall getDestinationfinalINTTerminalRuleCall_4_2_0() { return cDestinationfinalINTTerminalRuleCall_4_2_0; }

		//('-p' protocol=('tcp' | 'udp'))
		public Group getGroup_5() { return cGroup_5; }

		//'-p'
		public Keyword getPKeyword_5_0() { return cPKeyword_5_0; }

		//protocol=('tcp' | 'udp')
		public Assignment getProtocolAssignment_5_1() { return cProtocolAssignment_5_1; }

		//('tcp' | 'udp')
		public Alternatives getProtocolAlternatives_5_1_0() { return cProtocolAlternatives_5_1_0; }

		//'tcp'
		public Keyword getProtocolTcpKeyword_5_1_0_0() { return cProtocolTcpKeyword_5_1_0_0; }

		//'udp'
		public Keyword getProtocolUdpKeyword_5_1_0_1() { return cProtocolUdpKeyword_5_1_0_1; }

		//'-j'
		public Keyword getJKeyword_6() { return cJKeyword_6; }

		//target=('ACCEPT' | 'REJECT' | 'DROP')
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }

		//('ACCEPT' | 'REJECT' | 'DROP')
		public Alternatives getTargetAlternatives_7_0() { return cTargetAlternatives_7_0; }

		//'ACCEPT'
		public Keyword getTargetACCEPTKeyword_7_0_0() { return cTargetACCEPTKeyword_7_0_0; }

		//'REJECT'
		public Keyword getTargetREJECTKeyword_7_0_1() { return cTargetREJECTKeyword_7_0_1; }

		//'DROP'
		public Keyword getTargetDROPKeyword_7_0_2() { return cTargetDROPKeyword_7_0_2; }

		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class AttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Attribut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValeurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValeurVALParserRuleCall_2_0 = (RuleCall)cValeurAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attribut:
		//	name=ID ':' valeur=VAL ';';
		@Override public ParserRule getRule() { return rule; }

		//name=ID ':' valeur=VAL ';'
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//valeur=VAL
		public Assignment getValeurAssignment_2() { return cValeurAssignment_2; }

		//VAL
		public RuleCall getValeurVALParserRuleCall_2_0() { return cValeurVALParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FullnameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.Fullname");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Fullname:
		//	ID | INT;
		@Override public ParserRule getRule() { return rule; }

		//ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class VALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.VAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLEANTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VAL:
		//	BOOLEAN | INT | STRING;
		@Override public ParserRule getRule() { return rule; }

		//BOOLEAN | INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_0() { return cBOOLEANTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class ATypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.AType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIPv4Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIPv6Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AType:
		//	'IPv4' | 'IPv6';
		@Override public ParserRule getRule() { return rule; }

		//'IPv4' | 'IPv6'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'IPv4'
		public Keyword getIPv4Keyword_0() { return cIPv4Keyword_0; }

		//'IPv6'
		public Keyword getIPv6Keyword_1() { return cIPv6Keyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final GraphElements pGraph;
	private final ImportElements pImport;
	private final ImpotUriElements pImpotUri;
	private final CompFacetElements pCompFacet;
	private final ComponentElements pComponent;
	private final InstallerElements pInstaller;
	private final ExtendsElements pExtends;
	private final ChildrenElements pChildren;
	private final ExportElements pExport;
	private final ExportVariableElements pExportVariable;
	private final InitialisationElements pInitialisation;
	private final ImportsElements pImports;
	private final ImportVariableElements pImportVariable;
	private final FacetsElements pFacets;
	private final FacetElements pFacet;
	private final InstanceElements pInstance;
	private final IpTableElements pIpTable;
	private final AttributElements pAttribut;
	private final FullnameElements pFullname;
	private final VALElements pVAL;
	private final ATypeElements pAType;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tID;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RdslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGraph = new GraphElements();
		this.pImport = new ImportElements();
		this.pImpotUri = new ImpotUriElements();
		this.pCompFacet = new CompFacetElements();
		this.pComponent = new ComponentElements();
		this.pInstaller = new InstallerElements();
		this.pExtends = new ExtendsElements();
		this.pChildren = new ChildrenElements();
		this.pExport = new ExportElements();
		this.pExportVariable = new ExportVariableElements();
		this.pInitialisation = new InitialisationElements();
		this.pImports = new ImportsElements();
		this.pImportVariable = new ImportVariableElements();
		this.pFacets = new FacetsElements();
		this.pFacet = new FacetElements();
		this.pInstance = new InstanceElements();
		this.pIpTable = new IpTableElements();
		this.pAttribut = new AttributElements();
		this.pFullname = new FullnameElements();
		this.pVAL = new VALElements();
		this.pAType = new ATypeElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.BOOLEAN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.ID");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Rdsl.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Rdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	graphs=Graph | instances+=Instance*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Graph:
	//	(imports+=Import | components+=Component | facetGraphs+=Facet)+;
	public GraphElements getGraphAccess() {
		return pGraph;
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}

	//Import:
	//	'import' importURI=ImpotUri ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ImpotUri:
	//	name=ID '.graph';
	public ImpotUriElements getImpotUriAccess() {
		return pImpotUri;
	}
	
	public ParserRule getImpotUriRule() {
		return getImpotUriAccess().getRule();
	}

	//CompFacet:
	//	Facet | Component;
	public CompFacetElements getCompFacetAccess() {
		return pCompFacet;
	}
	
	public ParserRule getCompFacetRule() {
		return getCompFacetAccess().getRule();
	}

	//Component:
	//	name=ID '{'
	//	installers=Installer (childrens+=Children | exports+=Export | imports+=Imports | facets+=Facets | extends+=Extends)*
	//	'}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//Installer:
	//	'installer' ':' name=ID ';';
	public InstallerElements getInstallerAccess() {
		return pInstaller;
	}
	
	public ParserRule getInstallerRule() {
		return getInstallerAccess().getRule();
	}

	//Extends:
	//	'extends' ':' supComponent=[Component] ';';
	public ExtendsElements getExtendsAccess() {
		return pExtends;
	}
	
	public ParserRule getExtendsRule() {
		return getExtendsAccess().getRule();
	}

	//Children:
	//	'children' ':' (children+=[Component] ',')* child=[Component] ';';
	public ChildrenElements getChildrenAccess() {
		return pChildren;
	}
	
	public ParserRule getChildrenRule() {
		return getChildrenAccess().getRule();
	}

	//Export:
	//	'exports' ':' (exports+=exportVariable ',')* export=exportVariable ';';
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}

	//exportVariable:
	//	name=ID initial=Initialisation?;
	public ExportVariableElements getExportVariableAccess() {
		return pExportVariable;
	}
	
	public ParserRule getExportVariableRule() {
		return getExportVariableAccess().getRule();
	}

	//Initialisation:
	//	'=' val=INT;
	public InitialisationElements getInitialisationAccess() {
		return pInitialisation;
	}
	
	public ParserRule getInitialisationRule() {
		return getInitialisationAccess().getRule();
	}

	//Imports:
	//	'imports' ':' (imports+=importVariable ',')* imported=importVariable ';';
	public ImportsElements getImportsAccess() {
		return pImports;
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}

	//importVariable:
	//	external?='external'? (importvariable=[CompFacet] '.' (name=ID | '*') | name=ID) optional?='(optional)'?;
	public ImportVariableElements getImportVariableAccess() {
		return pImportVariable;
	}
	
	public ParserRule getImportVariableRule() {
		return getImportVariableAccess().getRule();
	}

	//Facets:
	//	'facets' ':' (facets+=[Facet] ',')* facet=[Facet] ';';
	public FacetsElements getFacetsAccess() {
		return pFacets;
	}
	
	public ParserRule getFacetsRule() {
		return getFacetsAccess().getRule();
	}

	//Facet:
	//	'facet' name=ID '{'
	//	exportFacet+=Export*
	//	childrenFacet=Children? ('extends' ':' (supFacets+=[Facet] ',')* supFacet=[Facet])?
	//	'}';
	public FacetElements getFacetAccess() {
		return pFacet;
	}
	
	public ParserRule getFacetRule() {
		return getFacetAccess().getRule();
	}

	//Instance:
	//	'instance' 'of' component=[Component] '{'
	//	instances+=Instance*
	//	'name' ':' name=ID fullname+=Fullname* ';' ('count' ':' val=INT ';')? ('numInstances' ':' valnum=INT ';')?
	//	('minAllowedInstances' ':' valmin=INT ';')? ('maxAllowedInstances' ':' valmax=INT ';')? ('adressType' ':'
	//	ipAddress=AType ';')? ('ipv4' 'address' ':' ((ip4+=INT '.')* ip4last=INT) ';')? ('ipv6' 'address' ':' ((ip6+=INT '.')*
	//	ip6last=INT) ';')? ('load' ':' theLoad=INT ';')? ('state' ':' theState=('public' | 'private') ';')? ('hostname' ':'
	//	hostname=ID ';')?
	//	iptable+=IpTable*
	//	attributes+=Attribut*
	//	'}';
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}

	//IpTable:
	//	'iptables' '-A' traffic=('INPUT' | 'OUTPUT' | 'FORWARD') ('-s' (source+=INT '.')+ sourcefinal=INT) ('-d'
	//	(destination+=INT '.')+ destinationfinal=INT) ('-p' protocol=('tcp' | 'udp')) '-j' target=('ACCEPT' | 'REJECT' |
	//	'DROP') ';';
	public IpTableElements getIpTableAccess() {
		return pIpTable;
	}
	
	public ParserRule getIpTableRule() {
		return getIpTableAccess().getRule();
	}

	//Attribut:
	//	name=ID ':' valeur=VAL ';';
	public AttributElements getAttributAccess() {
		return pAttribut;
	}
	
	public ParserRule getAttributRule() {
		return getAttributAccess().getRule();
	}

	//Fullname:
	//	ID | INT;
	public FullnameElements getFullnameAccess() {
		return pFullname;
	}
	
	public ParserRule getFullnameRule() {
		return getFullnameAccess().getRule();
	}

	//VAL:
	//	BOOLEAN | INT | STRING;
	public VALElements getVALAccess() {
		return pVAL;
	}
	
	public ParserRule getVALRule() {
		return getVALAccess().getRule();
	}

	//AType:
	//	'IPv4' | 'IPv6';
	public ATypeElements getATypeAccess() {
		return pAType;
	}
	
	public ParserRule getATypeRule() {
		return getATypeAccess().getRule();
	}

	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
