/*
 * generated by Xtext
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.rdsl.Child;
import org.xtext.rdsl.Children;
import org.xtext.rdsl.Comment;
import org.xtext.rdsl.Component;
import org.xtext.rdsl.Export;
import org.xtext.rdsl.Facet;
import org.xtext.rdsl.Graph;
import org.xtext.rdsl.Import;
import org.xtext.rdsl.Imports;
import org.xtext.rdsl.Initialisation;
import org.xtext.rdsl.Installer;
import org.xtext.rdsl.RdslPackage;
import org.xtext.rdsl.exportVariable;
import org.xtext.rdsl.importVariable;
import org.xtext.services.RdslGrammarAccess;

@SuppressWarnings("all")
public class RdslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RdslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == RdslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case RdslPackage.CHILD:
				sequence_Child(context, (Child) semanticObject); 
				return; 
			case RdslPackage.CHILDREN:
				sequence_Children(context, (Children) semanticObject); 
				return; 
			case RdslPackage.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case RdslPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case RdslPackage.EXPORT:
				sequence_Export(context, (Export) semanticObject); 
				return; 
			case RdslPackage.FACET:
				sequence_Facet(context, (Facet) semanticObject); 
				return; 
			case RdslPackage.GRAPH:
				sequence_Graph(context, (Graph) semanticObject); 
				return; 
			case RdslPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case RdslPackage.IMPORTS:
				sequence_Imports(context, (Imports) semanticObject); 
				return; 
			case RdslPackage.INITIALISATION:
				sequence_Initialisation(context, (Initialisation) semanticObject); 
				return; 
			case RdslPackage.INSTALLER:
				sequence_Installer(context, (Installer) semanticObject); 
				return; 
			case RdslPackage.EXPORT_VARIABLE:
				sequence_exportVariable(context, (exportVariable) semanticObject); 
				return; 
			case RdslPackage.IMPORT_VARIABLE:
				sequence_importVariable(context, (importVariable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Child(EObject context, Child semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RdslPackage.Literals.CHILD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RdslPackage.Literals.CHILD__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getChildAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (children+=Child* child=Child)
	 */
	protected void sequence_Children(EObject context, Children semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (values+=ID* value=ID)
	 */
	protected void sequence_Comment(EObject context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         comments+=Comment* 
	 *         name=ID 
	 *         comments+=Comment* 
	 *         installers=Installer 
	 *         comments+=Comment* 
	 *         properties+=Property* 
	 *         comments+=Comment* 
	 *         (supComponents+=[Component|ID]* supComponent=[Component|ID])? 
	 *         comments+=Comment*
	 *     )
	 */
	protected void sequence_Component(EObject context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (exports+=exportVariable* export=exportVariable)
	 */
	protected void sequence_Export(EObject context, Export semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID exportFacet+=[Export|ID] childrenFacet+=[Children|ID] supFacets+=[Facet|ID]* supFacet=[Facet|ID])
	 */
	protected void sequence_Facet(EObject context, Facet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (comments+=Comment* imports+=Import* components+=Component+)
	 */
	protected void sequence_Graph(EObject context, Graph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Import(EObject context, Import semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RdslPackage.Literals.IMPORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RdslPackage.Literals.IMPORT__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImportAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (imports+=importVariable* imported=importVariable)
	 */
	protected void sequence_Imports(EObject context, Imports semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_Initialisation(EObject context, Initialisation semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RdslPackage.Literals.INITIALISATION__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RdslPackage.Literals.INITIALISATION__VAL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getInitialisationAccess().getValINTTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Installer(EObject context, Installer semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RdslPackage.Literals.INSTALLER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RdslPackage.Literals.INSTALLER__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getInstallerAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID initial=Initialisation?)
	 */
	protected void sequence_exportVariable(EObject context, exportVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_importVariable(EObject context, importVariable semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RdslPackage.Literals.IMPORT_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RdslPackage.Literals.IMPORT_VARIABLE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImportVariableAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
}
