/*
 * generated by Xtext
 */
grammar InternalRdsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.RdslGrammarAccess;

}

@parser::members {

 	private RdslGrammarAccess grammarAccess;
 	
    public InternalRdslParser(TokenStream input, RdslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Graph";	
   	}
   	
   	@Override
   	protected RdslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleGraph
entryRuleGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraphRule()); }
	 iv_ruleGraph=ruleGraph 
	 { $current=$iv_ruleGraph.current; } 
	 EOF 
;

// Rule Graph
ruleGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGraphAccess().getCommentsCommentParserRuleCall_0_0()); 
	    }
		lv_comments_0_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphRule());
	        }
       		add(
       			$current, 
       			"comments",
        		lv_comments_0_0, 
        		"Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getGraphAccess().getImportsImportParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getGraphAccess().getComponentsComponentParserRuleCall_2_0()); 
	    }
		lv_components_2_0=ruleComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_2_0, 
        		"Component");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getImportAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getCommentsCommentParserRuleCall_0_0()); 
	    }
		lv_comments_0_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"comments",
        		lv_comments_0_0, 
        		"Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getCommentsCommentParserRuleCall_3_0()); 
	    }
		lv_comments_3_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"comments",
        		lv_comments_3_0, 
        		"Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getInstallersInstallerParserRuleCall_4_0()); 
	    }
		lv_installers_4_0=ruleInstaller		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		set(
       			$current, 
       			"installers",
        		lv_installers_4_0, 
        		"Installer");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getCommentsCommentParserRuleCall_5_0()); 
	    }
		lv_comments_5_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"comments",
        		lv_comments_5_0, 
        		"Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getPropertiesPropertyParserRuleCall_6_0()); 
	    }
		lv_properties_6_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_6_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getCommentsCommentParserRuleCall_7_0()); 
	    }
		lv_comments_7_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"comments",
        		lv_comments_7_0, 
        		"Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_8='extends:' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getComponentAccess().getExtendsKeyword_8_0());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getComponentAccess().getSupComponentsComponentCrossReference_8_1_0_0()); 
	}

)
)	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getComponentAccess().getCommaKeyword_8_1_1());
    }
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentRule());
	        }
        }
	otherlv_11=RULE_ID
	{
		newLeafNode(otherlv_11, grammarAccess.getComponentAccess().getSupComponentComponentCrossReference_8_2_0()); 
	}

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getCommentsCommentParserRuleCall_9_0()); 
	    }
		lv_comments_12_0=ruleComment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		add(
       			$current, 
       			"comments",
        		lv_comments_12_0, 
        		"Comment");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getComponentAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleInstaller
entryRuleInstaller returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstallerRule()); }
	 iv_ruleInstaller=ruleInstaller 
	 { $current=$iv_ruleInstaller.current; } 
	 EOF 
;

// Rule Installer
ruleInstaller returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='installer:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstallerAccess().getInstallerKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInstallerAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstallerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstallerAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyAccess().getChildrenParserRuleCall_0()); 
    }
    this_Children_0=ruleChildren
    { 
        $current = $this_Children_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAccess().getExportParserRuleCall_1()); 
    }
    this_Export_1=ruleExport
    { 
        $current = $this_Export_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAccess().getImportsParserRuleCall_2()); 
    }
    this_Imports_2=ruleImports
    { 
        $current = $this_Imports_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyAccess().getFacetParserRuleCall_3()); 
    }
    this_Facet_3=ruleFacet
    { 
        $current = $this_Facet_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleChildren
entryRuleChildren returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChildrenRule()); }
	 iv_ruleChildren=ruleChildren 
	 { $current=$iv_ruleChildren.current; } 
	 EOF 
;

// Rule Children
ruleChildren returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='children:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChildrenAccess().getChildrenKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getChildrenAccess().getChildrenChildParserRuleCall_1_0_0()); 
	    }
		lv_children_1_0=ruleChild		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChildrenRule());
	        }
       		add(
       			$current, 
       			"children",
        		lv_children_1_0, 
        		"Child");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChildrenAccess().getCommaKeyword_1_1());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getChildrenAccess().getChildChildParserRuleCall_2_0()); 
	    }
		lv_child_3_0=ruleChild		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChildrenRule());
	        }
       		set(
       			$current, 
       			"child",
        		lv_child_3_0, 
        		"Child");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getChildrenAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleChild
entryRuleChild returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChildRule()); }
	 iv_ruleChild=ruleChild 
	 { $current=$iv_ruleChild.current; } 
	 EOF 
;

// Rule Child
ruleChild returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getChildAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChildRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleExport
entryRuleExport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	 iv_ruleExport=ruleExport 
	 { $current=$iv_ruleExport.current; } 
	 EOF 
;

// Rule Export
ruleExport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exports:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExportAccess().getExportsKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getExportsExportVariableParserRuleCall_1_0_0()); 
	    }
		lv_exports_1_0=ruleexportVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		add(
       			$current, 
       			"exports",
        		lv_exports_1_0, 
        		"exportVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExportAccess().getCommaKeyword_1_1());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getExportExportVariableParserRuleCall_2_0()); 
	    }
		lv_export_3_0=ruleexportVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		set(
       			$current, 
       			"export",
        		lv_export_3_0, 
        		"exportVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExportAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleexportVariable
entryRuleexportVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExportVariableRule()); }
	 iv_ruleexportVariable=ruleexportVariable 
	 { $current=$iv_ruleexportVariable.current; } 
	 EOF 
;

// Rule exportVariable
ruleexportVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getExportVariableAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExportVariableAccess().getInitialInitialisationParserRuleCall_1_0()); 
	    }
		lv_initial_1_0=ruleInitialisation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportVariableRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_1_0, 
        		"Initialisation");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleInitialisation
entryRuleInitialisation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitialisationRule()); }
	 iv_ruleInitialisation=ruleInitialisation 
	 { $current=$iv_ruleInitialisation.current; } 
	 EOF 
;

// Rule Initialisation
ruleInitialisation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitialisationAccess().getEqualsSignKeyword_0());
    }
(
(
		lv_val_1_0=RULE_INT
		{
			newLeafNode(lv_val_1_0, grammarAccess.getInitialisationAccess().getValINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInitialisationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleImports
entryRuleImports returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportsRule()); }
	 iv_ruleImports=ruleImports 
	 { $current=$iv_ruleImports.current; } 
	 EOF 
;

// Rule Imports
ruleImports returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='imports:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportsAccess().getImportsKeyword_0());
    }
(	otherlv_1='external' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImportsAccess().getExternalKeyword_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getImportsAccess().getImportsImportVariableParserRuleCall_2_0_0()); 
	    }
		lv_imports_2_0=ruleimportVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportsRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"importVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportsAccess().getCommaKeyword_2_1());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getImportsAccess().getImportedImportVariableParserRuleCall_3_0()); 
	    }
		lv_imported_4_0=ruleimportVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportsRule());
	        }
       		set(
       			$current, 
       			"imported",
        		lv_imported_4_0, 
        		"importVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getImportsAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleimportVariable
entryRuleimportVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportVariableRule()); }
	 iv_ruleimportVariable=ruleimportVariable 
	 { $current=$iv_ruleimportVariable.current; } 
	 EOF 
;

// Rule importVariable
ruleimportVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getImportVariableAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='(optional)' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImportVariableAccess().getOptionalKeyword_1());
    }
)?)
;





// Entry rule entryRuleFacet
entryRuleFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFacetRule()); }
	 iv_ruleFacet=ruleFacet 
	 { $current=$iv_ruleFacet.current; } 
	 EOF 
;

// Rule Facet
ruleFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='facet' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFacetAccess().getFacetKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFacetAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFacetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFacetAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFacetRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getFacetAccess().getExportFacetExportCrossReference_3_0()); 
	}

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFacetRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getFacetAccess().getChildrenFacetChildrenCrossReference_4_0()); 
	}

)
)	otherlv_5='extends:' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFacetAccess().getExtendsKeyword_5());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFacetRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getFacetAccess().getSupFacetsFacetCrossReference_6_0_0()); 
	}

)
)	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFacetAccess().getCommaKeyword_6_1());
    }
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFacetRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getFacetAccess().getSupFacetFacetCrossReference_7_0()); 
	}

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFacetAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	 iv_ruleComment=ruleComment 
	 { $current=$iv_ruleComment.current; } 
	 EOF 
;

// Rule Comment
ruleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCommentAccess().getNumberSignKeyword_0());
    }
((
(
		lv_values_1_0=RULE_ID
		{
			newLeafNode(lv_values_1_0, grammarAccess.getCommentAccess().getValuesIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"ID");
	    }

)
)	otherlv_2=' ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCommentAccess().getSpaceKeyword_1_1());
    }
)*(
(
		lv_value_3_0=RULE_ID
		{
			newLeafNode(lv_value_3_0, grammarAccess.getCommentAccess().getValueIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"ID");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


