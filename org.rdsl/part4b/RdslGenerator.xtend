/*
 * generated by Xtext
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.xtext.rdsl.Instance

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */

class RdslGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {			
		 for( instance: resource.allContents.toIterable.filter(Instance)) {
		 	
		 	if (instance.hostname != null ){
		 		  			
  
    fsa.generateFile(
      instance.hostname + ".cfg",
      instance.compile)
      
           fsa.generateFile(
      instance.hostname + ".rule",
      instance.compileIp)
      }
        
      }
     
  }
		
	

def compile(Instance instance) ''' 
  define host {
        use                             linux-server
        host_name                       «instance.hostname»
        alias                           «instance.name » «instance.fullname.join(" ") »
        address                         «IF instance.ip4 != null && instance.ip4.size >0 »«instance.ip4.join(".")».«instance.ip4last»«ELSEIF  instance.ip6 != null && instance.ip4.size >0 »«instance.ip6.join(".")».«instance.ip6last»«ENDIF»
        max_check_attempts              5
        check_period                    24x7
        notification_interval           30
        notification_period             24x7
}
'''

def compileIp(Instance c) '''

iptables -L
traffic target prot source destination
«FOR rule : c.iptable»
«IF  rule.source !=null && rule.destination !=null && rule.protocol !=null»
«rule.traffic» «rule.target» «rule.protocol» «rule.source.join(".")».«rule.sourcefinal» «rule.destination.join(".")».«rule.destination»
«ENDIF»
«IF rule.source==null && rule.destination!=null && rule.protocol!=null»
«rule.traffic» «rule.target» «rule.protocol» 'anywhere' «rule.destination.join(".")».«rule.destination»
«ENDIF»
«IF rule.source!=null && rule.destination==null && rule.protocol!=null»
«rule.traffic» «rule.target» «rule.protocol» «rule.source.join(".")».«rule.sourcefinal» 'anywhere'
«ENDIF»
«IF rule.source!=null && rule.destination!=null && rule.protocol==null»
«rule.traffic» «rule.target» 'all' «rule.source.join(".")».«rule.sourcefinal» «rule.destination.join(".")».«rule.destination»
«ENDIF»
«IF rule.source==null && rule.destination==null && rule.protocol!=null»
«rule.traffic» «rule.target» «rule.protocol» 'anywhere' 'anywhere'
«ENDIF»
«IF rule.source==null && rule.destination!=null && rule.protocol==null»
«rule.traffic» «rule.target» 'all' 'anywhere' «rule.destination.join(".")».«rule.destination»
«ENDIF»
«IF rule.source!==null && rule.destination==null && rule.protocol==null»
«rule.traffic» «rule.target» 'all' «rule.source.join(".")».«rule.sourcefinal» 'anywhere'
«ENDIF»
«ENDFOR»

'''


}