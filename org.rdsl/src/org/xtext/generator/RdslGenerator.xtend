/*
 * generated by Xtext
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.rdsl.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RdslGenerator implements IGenerator {

	// get name of graph
	def className(Resource res){
		var name = res.URI.lastSegment
		name = name.substring(0,name.indexOf('.'))
	}

	// generate graph node
 	 def listGraph(Model model) '''
 	 // Generate GRAPH node
 	{  
    'id': 'GRAPH',  
    'name': 'GRAPH',  
    'data': {  
          '$color': '#416D9C',
          '$type': 'circle',
          '$dim': 10,
		  '$info': ''
     },  
    'adjacencies': [
    «IF model.graphs.imports!=null»
 	 «FOR im : model.graphs.imports»
	 'importedPackage_«im.importURI.name»' ,
 	 «ENDFOR»
 	 «ENDIF»
 	 
    «IF model.graphs.components!=null»
 	 «FOR com : model.graphs.components»
	 'com_«com.name»' ,
 	 «ENDFOR»
 	 «ENDIF»

    «IF model.graphs.facetGraphs!=null»
 	 «FOR facet : model.graphs.facetGraphs»
	 'facet_«facet.name»' ,
 	 «ENDFOR»
 	 «ENDIF» 	  	 
    ]  
  	}, 
	 '''	

 	// take a list of imported Packages of a graph 
 	 def listImportPackage(Graph graph) '''
 	 «IF graph.imports!=null»
 	 // Generate ImportedPackage node
 	 «FOR im : graph.imports»
 	{  
    'id': 'importedPackage_«im.importURI.name»',  
    'name': 'importedPackage',  
    'data': {  
          "$color": "#416D9C",
          "$type": "circle",
          "$dim": 7,
		  '$info': '«im.importURI.name»'
     	}
  	}, 
 	 «ENDFOR» 	 
 	 «ENDIF»
	 '''
	 	 
 	// take a list of components of a graph 
 	 def listComponent(Graph graph) '''
 	 «IF graph.components!=null»
 	 «FOR com : graph.components»
 	 // Generate Component node	 
 	 {  
    'id': 'com_«com.name»',  
    'name': 'Component: «com.name»',  
    'data': {  
          '$color': '#83548B',
          '$type': 'circle',
          '$dim': 10,
		  '$info': ''
     	},  
    'adjacencies': [
    «IF com.installers!=null»
	 'in_«com.name»_«com.installers.name»' ,
 	 «ENDIF»
 	 
    «IF com.childrens!=null»
 	 «FOR ch : com.childrens»
	    	«FOR ch1 : ch.children»
			'ch_«com.name»_«ch1.name»' ,		
	  		«ENDFOR»	  	  		
			'ch_«com.name»_«ch.child.name»' ,
	    «ENDFOR»
 	 «ENDIF»
 	 
 	 «IF com.exports!=null»
 	 «FOR ex : com.exports»
	    	«FOR ex1 : ex.exports»
			'ex_«com.name»_«ex1.name»' ,		
	  		«ENDFOR»	  	  		
			'ex_«com.name»_«ex.export.name»' ,
	    «ENDFOR»
 	 «ENDIF»
 	 
 	 «IF com.imports!=null»
 	 «FOR im : com.imports»
	    	«FOR im1 : im.imports»
			'im_«com.name»_«im1.name»' ,		
	  		«ENDFOR»	  	  		
			'im_«com.name»_«im.imported.name»' ,
	    «ENDFOR»
 	 «ENDIF» 	
 	 
 	 «IF com.facets!=null»
 	 «FOR fc : com.facets»
	    	«FOR fc1 : fc.facets»
			'facet_«fc1.name»' ,		
	  		«ENDFOR»	  	  		
			'facet_«fc.facet.name»' ,
	    «ENDFOR»
 	 «ENDIF»  	 
 	  	 
    ] 
  	}, 
 	 «ENDFOR»	 
 	 «ENDIF»
	 '''	 	 
	 	 
	 	 
	 // take a list properties of a Component
	 def listPropertiesOfComponent(Component com) '''
	 	// Generate Installer node 	
	 	{  
	    'id': 'in_«com.name»_«com.installers.name»',  
	    'name': 'Installer',  
	    'data': {  
	          '$color': '#70A35E',
	          '$type': 'star',
	          '$dim': 10,
			  '$info': '«com.installers.name»'
	     	}
  		},

		
  		«IF com.childrens!=null»
  		// Generate Children node
	  	«com.listChildren»
	  	«ENDIF»

  		«IF com.exports!=null»
  		// Generate Export node
	  	«com.listExport»
	  	«ENDIF»	  	
	  	
  		«IF com.imports!=null»
  		// Generate Import node
	  	«com.listImport»
	  	«ENDIF»	  
 	'''

	// take a list of Children of a Component
	 def listChildren(Component com)'''
	    «FOR ch : com.childrens»
	    	«FOR ch1 : ch.children»
			 	{  
			    'id': 'ch_«com.name»_«ch1.name»',  
			    'name': 'children',  
			    'data': {  
			          '$color': '#C74243',
			          '$type': 'circle',
			          '$dim': 10,
					  '$info': '«ch1.name»'
			     	}
		  		},  			
	  			«ENDFOR»
	  			{  
			    'id': 'ch_«com.name»_«ch.child.name»',  
			    'name': 'children',  
			    'data': {  
			          '$color': '#C74243',
			          '$type': 'circle',
			          '$dim': 10,
					  '$info': '«ch.child.name»'
			     	}
		  		}, 	  	  		
	    «ENDFOR»
	 '''
	 
	// take a list of Exports of a Component  
	 def listExport(Component com)'''
	    «FOR e : com.exports»
	    		«FOR e1 : e.exports»	
	    			{  
				    'id': 'ex_«com.name»_«e1.name»',  
				    'name': 'export',  
				    'data': {  
				          '$color': '#C74243',
				          '$type': 'rectangle',
				          '$dim': 10,
						  '$info': '«e1.name» «IF e1.initial!=null»  :«e1.initial.^val»«ENDIF»'
				     	}
			  		}, 				
	  			«ENDFOR»
	  				{  
				    'id': 'ex_«com.name»_«e.export.name»',  
				    'name': 'export',  
				    'data': {  
				          '$color': '#C74243',
				          '$type': 'rectangle',
				          '$dim': 10,
						  '$info': '«e.export.name» «IF e.export.initial!=null» :«e.export.initial.^val»«ENDIF» '
				     	}
			  		}, 		  			 					  			
	    «ENDFOR»
	 '''	  
	 

	// take a list of Import of a Component  
	 def listImport(Component com)'''
	    «FOR im : com.imports»
	    		«FOR im1 : im.imports»	
		    		{  
				    'id': 'im_«com.name»_«im1.name»',  
				    'name': 'import',  
				    'data': {  
				          '$color': '#C74243',
				          '$type': 'triangle',
				          '$dim': 10,
						  '$info': '«IF im1.external==true»external«ENDIF» «im1.name»  «IF im1.importvariable!=null»of «im1.importvariable.name»«ENDIF» «IF im1.optional==true»(optional)«ENDIF» '
				     	}
			  		}, 			  			  				  							
	  			«ENDFOR» 		
	  				{  
				    'id': 'im_«com.name»_«im.imported.name»',  
				    'name': 'import',  
				    'data': {  
				          '$color': '#C74243',
				          '$type': 'triangle',
				          '$dim': 10,
						  '$info': '«IF im.imported.external==true»external«ENDIF» «im.imported.name»  «IF im.imported.importvariable!=null»of «im.imported.importvariable.name»«ENDIF»  «IF im.imported.optional==true»(optional)«ENDIF» '
				     	}
			  		}, 	  				  					 		  			  		 			
	    «ENDFOR»
	 '''	 
	
 	// take a list of facets of a graph 
 	 def listFacet(Model model) '''
 	 «IF model.graphs.facetGraphs!=null»
 	 // Generate Facet node
 	 «FOR facet : model.graphs.facetGraphs»
 	{  
    'id': 'facet_«facet.name»',  
    'name': 'Facet:_«facet.name»',  
    'data': {  
          "$color": "#416D9C",
          "$type": "star",
          "$dim": 7,
		  '$info': '«IF facet.exportFacet!=null»(Export:«FOR e: facet.exportFacet»«FOR e1 : e.exports» «e1.name»«ENDFOR» «e.export.name»«ENDFOR»)«ENDIF»   «IF facet.childrenFacet!=null»(Children: «FOR ch1: facet.childrenFacet.children» «ch1.name»«ENDFOR»«facet.childrenFacet.child.name»)«ENDIF»    «IF facet.supFacet!=null»Extends:«facet.supFacet.name»«ENDIF» «IF facet.supFacets!=null»«FOR fc:facet.supFacets»«fc.name»«ENDFOR»«ENDIF»'
     	}
  	}, 
 	 «ENDFOR» 	 
 	 «ENDIF»
	 '''	 

 	// take a list of facets of a graph 
 	 def listInstances(Model model) '''
 	 // Generate Instance node
 	 «FOR instance : model.instances»
 	{  
    'id': 'instance_«instance.component.name»',  
    'name': 'instance of «instance.component.name»',  
    'data': {  
          "$color": "#416D9C",
          "$type": "circle",
          "$dim": 7,
		  '$info': '«IF instance.count!=null»(Count:«instance.^val»)«ENDIF»   «IF instance.attributes.size>0»(Attibute: «FOR att: instance.attributes» «att.name» «att.valeur»«ENDFOR»«ENDIF»'
     	}
     «IF instance.instances!=null»	
     	,  
    'adjacencies': [
 	 «FOR ins : instance.instances»
	 'instance_«ins.name»' ,
 	 «ENDFOR»	  	  	 
    ]  
    «ENDIF»
  	}, 
  	«ENDFOR»
	 ''' 
	 
 	 def toJSONCode(Model m) '''
 	 	«IF m.graphs!=null»
		   «m.listGraph»
		   «m.graphs.listImportPackage»
		   «m.graphs.listComponent»
		   «FOR com : m.graphs.components»
		 	   «com.listPropertiesOfComponent»
		   «ENDFOR» 
		   «m.listFacet»
		«ELSE»   
		   «IF m.instances!=null»	
		   		«m.listInstances»   
		   «ENDIF»
		«ENDIF»   
 		'''
 	
 	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) { 
		fsa.generateFile(resource.className+".json", 
		"var json = [" 	
			+ toJSONCode(resource.contents.head as Model) +
		"];"		
		)				
	}
}
