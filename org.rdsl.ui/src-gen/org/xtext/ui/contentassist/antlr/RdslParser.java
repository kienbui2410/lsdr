/*
 * generated by Xtext
 */
package org.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.services.RdslGrammarAccess;

public class RdslParser extends AbstractContentAssistParser {
	
	@Inject
	private RdslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.ui.contentassist.antlr.internal.InternalRdslParser createParser() {
		org.xtext.ui.contentassist.antlr.internal.InternalRdslParser result = new org.xtext.ui.contentassist.antlr.internal.InternalRdslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
					put(grammarAccess.getGraphAccess().getGroup(), "rule__Graph__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
					put(grammarAccess.getComponentAccess().getGroup_8(), "rule__Component__Group_8__0");
					put(grammarAccess.getComponentAccess().getGroup_8_1(), "rule__Component__Group_8_1__0");
					put(grammarAccess.getInstallerAccess().getGroup(), "rule__Installer__Group__0");
					put(grammarAccess.getChildrenAccess().getGroup(), "rule__Children__Group__0");
					put(grammarAccess.getChildrenAccess().getGroup_1(), "rule__Children__Group_1__0");
					put(grammarAccess.getExportAccess().getGroup(), "rule__Export__Group__0");
					put(grammarAccess.getExportAccess().getGroup_1(), "rule__Export__Group_1__0");
					put(grammarAccess.getExportVariableAccess().getGroup(), "rule__ExportVariable__Group__0");
					put(grammarAccess.getInitialisationAccess().getGroup(), "rule__Initialisation__Group__0");
					put(grammarAccess.getImportsAccess().getGroup(), "rule__Imports__Group__0");
					put(grammarAccess.getImportsAccess().getGroup_2(), "rule__Imports__Group_2__0");
					put(grammarAccess.getImportVariableAccess().getGroup(), "rule__ImportVariable__Group__0");
					put(grammarAccess.getFacetAccess().getGroup(), "rule__Facet__Group__0");
					put(grammarAccess.getFacetAccess().getGroup_6(), "rule__Facet__Group_6__0");
					put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
					put(grammarAccess.getCommentAccess().getGroup_1(), "rule__Comment__Group_1__0");
					put(grammarAccess.getGraphAccess().getCommentsAssignment_0(), "rule__Graph__CommentsAssignment_0");
					put(grammarAccess.getGraphAccess().getImportsAssignment_1(), "rule__Graph__ImportsAssignment_1");
					put(grammarAccess.getGraphAccess().getComponentsAssignment_2(), "rule__Graph__ComponentsAssignment_2");
					put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
					put(grammarAccess.getComponentAccess().getCommentsAssignment_0(), "rule__Component__CommentsAssignment_0");
					put(grammarAccess.getComponentAccess().getNameAssignment_1(), "rule__Component__NameAssignment_1");
					put(grammarAccess.getComponentAccess().getCommentsAssignment_3(), "rule__Component__CommentsAssignment_3");
					put(grammarAccess.getComponentAccess().getInstallersAssignment_4(), "rule__Component__InstallersAssignment_4");
					put(grammarAccess.getComponentAccess().getCommentsAssignment_5(), "rule__Component__CommentsAssignment_5");
					put(grammarAccess.getComponentAccess().getPropertiesAssignment_6(), "rule__Component__PropertiesAssignment_6");
					put(grammarAccess.getComponentAccess().getCommentsAssignment_7(), "rule__Component__CommentsAssignment_7");
					put(grammarAccess.getComponentAccess().getSupComponentsAssignment_8_1_0(), "rule__Component__SupComponentsAssignment_8_1_0");
					put(grammarAccess.getComponentAccess().getSupComponentAssignment_8_2(), "rule__Component__SupComponentAssignment_8_2");
					put(grammarAccess.getComponentAccess().getCommentsAssignment_9(), "rule__Component__CommentsAssignment_9");
					put(grammarAccess.getInstallerAccess().getNameAssignment_1(), "rule__Installer__NameAssignment_1");
					put(grammarAccess.getChildrenAccess().getChildrenAssignment_1_0(), "rule__Children__ChildrenAssignment_1_0");
					put(grammarAccess.getChildrenAccess().getChildAssignment_2(), "rule__Children__ChildAssignment_2");
					put(grammarAccess.getChildAccess().getNameAssignment(), "rule__Child__NameAssignment");
					put(grammarAccess.getExportAccess().getExportsAssignment_1_0(), "rule__Export__ExportsAssignment_1_0");
					put(grammarAccess.getExportAccess().getExportAssignment_2(), "rule__Export__ExportAssignment_2");
					put(grammarAccess.getExportVariableAccess().getNameAssignment_0(), "rule__ExportVariable__NameAssignment_0");
					put(grammarAccess.getExportVariableAccess().getInitialAssignment_1(), "rule__ExportVariable__InitialAssignment_1");
					put(grammarAccess.getInitialisationAccess().getValAssignment_1(), "rule__Initialisation__ValAssignment_1");
					put(grammarAccess.getImportsAccess().getImportsAssignment_2_0(), "rule__Imports__ImportsAssignment_2_0");
					put(grammarAccess.getImportsAccess().getImportedAssignment_3(), "rule__Imports__ImportedAssignment_3");
					put(grammarAccess.getImportVariableAccess().getNameAssignment_0(), "rule__ImportVariable__NameAssignment_0");
					put(grammarAccess.getFacetAccess().getNameAssignment_1(), "rule__Facet__NameAssignment_1");
					put(grammarAccess.getFacetAccess().getExportFacetAssignment_3(), "rule__Facet__ExportFacetAssignment_3");
					put(grammarAccess.getFacetAccess().getChildrenFacetAssignment_4(), "rule__Facet__ChildrenFacetAssignment_4");
					put(grammarAccess.getFacetAccess().getSupFacetsAssignment_6_0(), "rule__Facet__SupFacetsAssignment_6_0");
					put(grammarAccess.getFacetAccess().getSupFacetAssignment_7(), "rule__Facet__SupFacetAssignment_7");
					put(grammarAccess.getCommentAccess().getValuesAssignment_1_0(), "rule__Comment__ValuesAssignment_1_0");
					put(grammarAccess.getCommentAccess().getValueAssignment_2(), "rule__Comment__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.ui.contentassist.antlr.internal.InternalRdslParser typedParser = (org.xtext.ui.contentassist.antlr.internal.InternalRdslParser) parser;
			typedParser.entryRuleGraph();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RdslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RdslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
