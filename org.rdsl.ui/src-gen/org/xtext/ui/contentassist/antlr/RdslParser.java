/*
 * generated by Xtext
 */
package org.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.services.RdslGrammarAccess;

public class RdslParser extends AbstractContentAssistParser {
	
	@Inject
	private RdslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.ui.contentassist.antlr.internal.InternalRdslParser createParser() {
		org.xtext.ui.contentassist.antlr.internal.InternalRdslParser result = new org.xtext.ui.contentassist.antlr.internal.InternalRdslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getCompFacetAccess().getAlternatives(), "rule__CompFacet__Alternatives");
					put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
					put(grammarAccess.getImportVariableAccess().getAlternatives_1(), "rule__ImportVariable__Alternatives_1");
					put(grammarAccess.getImportVariableAccess().getAlternatives_1_0_2(), "rule__ImportVariable__Alternatives_1_0_2");
					put(grammarAccess.getInstanceAccess().getAlternatives_6(), "rule__Instance__Alternatives_6");
					put(grammarAccess.getVALAccess().getAlternatives(), "rule__VAL__Alternatives");
					put(grammarAccess.getGraphAccess().getGroup(), "rule__Graph__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
					put(grammarAccess.getInstallerAccess().getGroup(), "rule__Installer__Group__0");
					put(grammarAccess.getExtendsAccess().getGroup(), "rule__Extends__Group__0");
					put(grammarAccess.getChildrenAccess().getGroup(), "rule__Children__Group__0");
					put(grammarAccess.getChildrenAccess().getGroup_1(), "rule__Children__Group_1__0");
					put(grammarAccess.getExportAccess().getGroup(), "rule__Export__Group__0");
					put(grammarAccess.getExportAccess().getGroup_1(), "rule__Export__Group_1__0");
					put(grammarAccess.getExportVariableAccess().getGroup(), "rule__ExportVariable__Group__0");
					put(grammarAccess.getInitialisationAccess().getGroup(), "rule__Initialisation__Group__0");
					put(grammarAccess.getImportsAccess().getGroup(), "rule__Imports__Group__0");
					put(grammarAccess.getImportsAccess().getGroup_1(), "rule__Imports__Group_1__0");
					put(grammarAccess.getImportVariableAccess().getGroup(), "rule__ImportVariable__Group__0");
					put(grammarAccess.getImportVariableAccess().getGroup_1_0(), "rule__ImportVariable__Group_1_0__0");
					put(grammarAccess.getFacetsAccess().getGroup(), "rule__Facets__Group__0");
					put(grammarAccess.getFacetsAccess().getGroup_1(), "rule__Facets__Group_1__0");
					put(grammarAccess.getFacetAccess().getGroup(), "rule__Facet__Group__0");
					put(grammarAccess.getFacetAccess().getGroup_5(), "rule__Facet__Group_5__0");
					put(grammarAccess.getFacetAccess().getGroup_5_1(), "rule__Facet__Group_5_1__0");
					put(grammarAccess.getInstanceAccess().getGroup(), "rule__Instance__Group__0");
					put(grammarAccess.getInstanceAccess().getGroup_8(), "rule__Instance__Group_8__0");
					put(grammarAccess.getAttributAccess().getGroup(), "rule__Attribut__Group__0");
					put(grammarAccess.getModelAccess().getGraphsAssignment_0(), "rule__Model__GraphsAssignment_0");
					put(grammarAccess.getModelAccess().getInstancesAssignment_1(), "rule__Model__InstancesAssignment_1");
					put(grammarAccess.getGraphAccess().getImportsAssignment_0(), "rule__Graph__ImportsAssignment_0");
					put(grammarAccess.getGraphAccess().getComponentsAssignment_1(), "rule__Graph__ComponentsAssignment_1");
					put(grammarAccess.getGraphAccess().getFacetGraphsAssignment_2(), "rule__Graph__FacetGraphsAssignment_2");
					put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
					put(grammarAccess.getComponentAccess().getNameAssignment_0(), "rule__Component__NameAssignment_0");
					put(grammarAccess.getComponentAccess().getInstallersAssignment_2(), "rule__Component__InstallersAssignment_2");
					put(grammarAccess.getComponentAccess().getPropertiesAssignment_3(), "rule__Component__PropertiesAssignment_3");
					put(grammarAccess.getInstallerAccess().getNameAssignment_1(), "rule__Installer__NameAssignment_1");
					put(grammarAccess.getExtendsAccess().getSupComponentAssignment_1(), "rule__Extends__SupComponentAssignment_1");
					put(grammarAccess.getChildrenAccess().getChildrenAssignment_1_0(), "rule__Children__ChildrenAssignment_1_0");
					put(grammarAccess.getChildrenAccess().getChildAssignment_2(), "rule__Children__ChildAssignment_2");
					put(grammarAccess.getExportAccess().getExportsAssignment_1_0(), "rule__Export__ExportsAssignment_1_0");
					put(grammarAccess.getExportAccess().getExportAssignment_2(), "rule__Export__ExportAssignment_2");
					put(grammarAccess.getExportVariableAccess().getNameAssignment_0(), "rule__ExportVariable__NameAssignment_0");
					put(grammarAccess.getExportVariableAccess().getInitialAssignment_1(), "rule__ExportVariable__InitialAssignment_1");
					put(grammarAccess.getInitialisationAccess().getValAssignment_1(), "rule__Initialisation__ValAssignment_1");
					put(grammarAccess.getImportsAccess().getImportsAssignment_1_0(), "rule__Imports__ImportsAssignment_1_0");
					put(grammarAccess.getImportsAccess().getImportedAssignment_2(), "rule__Imports__ImportedAssignment_2");
					put(grammarAccess.getImportVariableAccess().getImportvariableAssignment_1_0_0(), "rule__ImportVariable__ImportvariableAssignment_1_0_0");
					put(grammarAccess.getImportVariableAccess().getNameAssignment_1_0_2_0(), "rule__ImportVariable__NameAssignment_1_0_2_0");
					put(grammarAccess.getImportVariableAccess().getNameAssignment_1_1(), "rule__ImportVariable__NameAssignment_1_1");
					put(grammarAccess.getImportVariableAccess().getOptionalAssignment_2(), "rule__ImportVariable__OptionalAssignment_2");
					put(grammarAccess.getFacetsAccess().getFacetsAssignment_1_0(), "rule__Facets__FacetsAssignment_1_0");
					put(grammarAccess.getFacetsAccess().getFacetAssignment_2(), "rule__Facets__FacetAssignment_2");
					put(grammarAccess.getFacetAccess().getNameAssignment_1(), "rule__Facet__NameAssignment_1");
					put(grammarAccess.getFacetAccess().getExportFacetAssignment_3(), "rule__Facet__ExportFacetAssignment_3");
					put(grammarAccess.getFacetAccess().getChildrenFacetAssignment_4(), "rule__Facet__ChildrenFacetAssignment_4");
					put(grammarAccess.getFacetAccess().getSupFacetsAssignment_5_1_0(), "rule__Facet__SupFacetsAssignment_5_1_0");
					put(grammarAccess.getFacetAccess().getSupFacetAssignment_5_2(), "rule__Facet__SupFacetAssignment_5_2");
					put(grammarAccess.getInstanceAccess().getComponentAssignment_2(), "rule__Instance__ComponentAssignment_2");
					put(grammarAccess.getInstanceAccess().getNameAssignment_5(), "rule__Instance__NameAssignment_5");
					put(grammarAccess.getInstanceAccess().getValAssignment_8_1(), "rule__Instance__ValAssignment_8_1");
					put(grammarAccess.getInstanceAccess().getAttributesAssignment_9(), "rule__Instance__AttributesAssignment_9");
					put(grammarAccess.getInstanceAccess().getInstancesAssignment_10(), "rule__Instance__InstancesAssignment_10");
					put(grammarAccess.getAttributAccess().getNameAssignment_0(), "rule__Attribut__NameAssignment_0");
					put(grammarAccess.getAttributAccess().getValeurAssignment_2(), "rule__Attribut__ValeurAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.ui.contentassist.antlr.internal.InternalRdslParser typedParser = (org.xtext.ui.contentassist.antlr.internal.InternalRdslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RdslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RdslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
